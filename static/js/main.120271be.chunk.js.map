{"version":3,"sources":["api.js","redux/actions/actionTypes.js","redux/actions/dogs.js","redux/actions/app.js","components/non-connected/photo/photo.js","components/non-connected/infinite-scroll/infinite-scroll.js","util/util.js","components/connected/photos/photos.js","components/connected/menu/menu.js","components/non-connected/error-boundary/error-boundary.js","components/non-connected/search/search.js","redux/actions/breeds.js","components/connected/app/App.js","redux/reducers/dogs.js","redux/reducers/breeds.js","redux/reducers/app.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["getJSON","url","a","fetch","res","json","fetchDogs","breed","subBreed","FETCH_DOGS","Object","freeze","INITIAL","SUCCESS","FAILURE","FETCH_BREEDS","DOGS","SET_CURRENT_BREED","GET_RANDOM_DOGS","ADD_FAVORITE","REMOVE_FAVORITE","SET_SHOW_FAVORITES","APPEND_CURRENT_DOGS","APP","SET_FIRST_SEARCH","SET_DARK_THEME","SET_SINGLE_VIEW","SET_ERROR","initialAction","type","successAction","dogs","message","failureAction","err","setCurrentBreed","currentBreed","getRandomDogs","addFavorite","dog","getDogs","dispatch","status","setFirstSearch","firstSearch","setError","error","setSingleView","singleView","Photo","isLoaded","isFavorite","handleOnClick","e","persist","target","scrollIntoViewIfNeeded","className","key","onClick","style","backgroundImage","icon","IconNames","STAR","InfiniteScroll","children","handleLastRow","useInView","lastRowRef","lastRowInView","onLastRow","debounce","useEffect","ref","mod","num","n","capitalize","str","slice","toUpperCase","toLowerCase","prettifyBreed","trim","promisifyImage","src","Promise","resolve","img","Image","addEventListener","setAttribute","randomDogs","prev","diff","difference","result","length","randIndex","random","randValue","splice","push","breedToKey","JSON","stringify","updateDogs","prevDogs","newDogs","cloneDeep","Set","memoizeFilterList","memoize","items","inputVal","filter","includes","connect","state","dogState","app","currentDogs","favoriteDogs","showingFavoriteDogs","pageSize","max","size","useState","loadedPhotos","setLoadedPhotos","isMounted","notLoadedPhotos","photos","promises","map","allSettled","promisifyPhotos","then","rows","props","infiniteScrollProps","appendCurrentDogs","darkTheme","menuOpen","setMenuOpen","scrollY","setScrollY","updateScroll","throttle","window","removeEventListener","menuClass","CHEVRON_LEFT","MENU","CSSTransition","in","unmountOnExit","mountOnEnter","classNames","timeout","checked","onChange","showFavoriteDogs","MOON","setDarkTheme","ErrorBoundary","errorInfo","this","hasError","ERROR","intent","Intent","DANGER","React","Component","Search","handleValueChange","handleOnFocus","KEY_CODE","UP","DOWN","ENTER","setInputVal","showOptions","setShowOptions","filteredItems","setFilteredItems","selectedIndex","setSelectedIndex","placeholder","setPlaceholder","searchContainerRef","useRef","currOptionRef","current","handleClick","contains","document","optionSelect","parse","keyToBreed","SEARCH","value","spellCheck","onKeyUp","newIndex","keyCode","onFocus","options","i","val","label","dataset","renderOptions","breeds","appState","querySelector","setProperty","dogPhotos","useMemo","noFavorites","STAR_EMPTY","searchProps","INITIAL_STATE","inProgress","formatBreeds","entries","forEach","subBreeds","combineReducers","prevState","action","Array","from","newFavoriteDogs","index","findIndex","middleware","applyMiddleware","logger","thunk","createStore","finalReducer","ReactDOM","render","store","getElementById"],"mappings":"qbAMeA,E,8EAAf,WAAuBC,GAAvB,eAAAC,EAAA,+EAE0BC,MAAMF,GAFhC,cAEcG,EAFd,gBAGqBA,EAAIC,OAHzB,6I,sBAgBO,SAASC,EAAUC,GAAyB,IAAlBC,EAAiB,uDAAN,KACpCP,EAAG,oCAAgCM,EAAhC,KAGP,OAFIC,IAAUP,GAAG,UAAOO,EAAP,MAEVR,EADPC,GAAO,UCzBJ,IAAMQ,EAAaC,OAAOC,OAAO,CACpCC,QAAS,qBACTC,QAAS,qBACTC,QAAS,uBAGAC,EAAeL,OAAOC,OAAO,CACtCC,QAAS,uBACTC,QAAS,uBACTC,QAAS,yBAGAE,EAAON,OAAOC,OAAO,CAC9BM,kBAAmB,yBACnBC,gBAAiB,uBACjBC,aAAc,oBACdC,gBAAiB,uBACjBC,mBAAoB,0BACpBC,oBAAqB,6BAGZC,EAAMb,OAAOC,OAAO,CAC7Ba,iBAAkB,uBAClBC,eAAgB,qBAChBC,gBAAiB,sBACjBC,UAAW,kBCtBf,SAASC,IACL,MAAO,CACHC,KAAMpB,EAAWG,SAIzB,SAASkB,EAAT,GAA8C,IAAtBvB,EAAqB,EAArBA,MAAMC,EAAe,EAAfA,SAASJ,EAAM,EAANA,IACnC,MAAO,CACHyB,KAAMpB,EAAWI,QACjBN,QACAC,WACAuB,KAAM3B,EAAI4B,SAIlB,SAASC,EAAcC,GACnB,MAAO,CACHL,KAAMpB,EAAWK,QACjBoB,OAID,SAASC,EAAgBC,GAC5B,MAAO,CACHP,KAAMb,EAAKC,kBACXmB,gBAID,SAASC,IACZ,MAAO,CACHR,KAAMb,EAAKE,iBAWZ,SAASoB,EAAYC,GACxB,MAAO,CACHV,KAAMb,EAAKG,aACXoB,OAkBD,SAASC,EAAQjC,GAAuB,IAAhBC,EAAe,uDAAN,KACpC,8CAAO,WAAOiC,GAAP,eAAAvC,EAAA,6DACHuC,EAASb,KADN,kBAGmBtB,EAAUC,EAAMC,GAHnC,OAIoB,aADbJ,EAHP,QAISsC,OACJD,EAASX,EAAc,CAACvB,QAAMC,WAASJ,SAEvCqC,EAASR,EAAc7B,IAP5B,gDAUCqC,EAASR,EAAc,EAAD,KAVvB,yDAAP,mDAAM,GCjEH,SAASU,EAAeC,GAC3B,MAAO,CACHf,KAAMN,EAAIC,iBACVoB,eAWD,SAASC,EAASC,GACrB,MAAO,CACHjB,KAAMN,EAAII,UACVmB,SAID,SAASC,EAAcC,GAC1B,MAAO,CACHnB,KAAMN,EAAIG,gBACVsB,c,4BC2DOC,MArEf,YAAmE,IAAnDhD,EAAkD,EAAlDA,IAAKiD,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,WAAYH,EAAuB,EAAvBA,WAAYP,EAAW,EAAXA,SAW7CW,EAAa,uCAAG,WAAMC,GAAN,SAAAnD,EAAA,mEAEV8C,EAFU,gBAINP,EADAU,GFQWZ,EEPatC,EFQjC,CACH4B,KAAMb,EAAKI,gBACXmB,QERqBD,EAAYrC,IANf,6BASVoD,EAAEC,UATQ,SAUJb,EAASM,GAAc,IAVnB,OAWVM,EAAEE,OAAOC,yBAXC,yDAcdf,EAASI,EAAS,EAAD,KAdH,kCFWnB,IAAwBN,IEXL,qBAAH,sDAmCnB,OAAIW,EAEI,yBAAKO,UAAS,QAAWC,IAAKzD,EAAK0D,QAASP,GACxC,yBAAKK,UAAS,iBAAoBG,MAAO,CAACC,gBAAgB,OAAD,OAAS5D,EAAT,QAhB7D+C,EAEI,yBAAKS,UAAW,WACZ,kBAAC,IAAD,CAAMA,UAAWN,EAAa,WAAa,GAAIW,KAAMC,IAAUC,QAIpE,MAgBP,yBAAKP,UAAW,kBACZ,yBAAKA,UAAW,qB,gBC1BbQ,MAnCf,YAA8E,IAArDC,EAAoD,EAApDA,SAAUC,EAA0C,EAA1CA,cAA0C,KAA3B1B,SAA2B,EAAjBgB,kBAAiB,MAAL,GAAK,IAIrCW,cAJqC,mBAIlEC,EAJkE,KAItDC,EAJsD,KAKnEC,EAAYC,mBAASL,EAAe,KAgB1C,OARAM,qBAAU,WACFH,GACAC,MAEL,CAACD,IAKA,yBAAKb,UAAWA,GACXS,EACD,yBAAKQ,IAAKL,MC1Bf,SAASM,EAAIC,EAAIC,GACpB,OAASD,EAAMC,EAAKA,GAAKA,EAQ7B,SAASC,EAAWC,GAChB,OAAOA,EAAIC,MAAM,EAAE,GAAGC,cAAgBF,EAAIC,MAAM,GAAGE,cAShD,SAASC,EAAT,GAAkD,IAA1B5E,EAAyB,EAAzBA,MAAyB,IAAlBC,gBAAkB,MAAP,KAAO,EACpD,MAAO,UAAGA,EAAWsE,EAAWtE,GAAY,GAArC,YAA2CsE,EAAWvE,IAAS6E,OASnE,SAASC,EAAeC,GAC3B,OAAO,IAAIC,SAAQ,SAAAC,GACf,IAAMC,EAAM,IAAIC,MAChBD,EAAIE,iBAAiB,OAAQH,GAC7BC,EAAIG,aAAa,MAAON,MAsBzB,SAASO,EAAWhB,EAAG9C,GAG1B,IAH0C,IAAV+D,EAAS,uDAAJ,GAC/BC,EAAOC,qBAAWjE,EAAM+D,GACxBG,EAAM,YAAOH,GACbjB,EAAI,GACc,IAAhBkB,EAAKG,QADA,CAET,IAAMC,EAAYC,iBAAO,EAAEL,EAAKG,OAAO,GACjCG,EAAYN,EAAKO,OAAOH,EAAW,GACrCE,EAAUH,SACVD,EAAOM,KAAKF,EAAU,IACtBxB,KAGR,OAAOoB,EAUJ,SAASO,EAAT,GAAwC,IAAnBjG,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SAC/B,OAAOiG,KAAKC,UAAU,CAACnG,QAAOC,aAoB3B,SAASmG,EAAWC,EAApB,GAAwD,IAAzBrG,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,SAAUuB,EAAO,EAAPA,KAC7C2B,EAAM8C,EAAW,CAACjG,QAAOC,aACzBqG,EAAUC,oBAAUF,GAM1B,OAFIC,EAAQnD,GAHNA,KAAOmD,EAGM,IAAIE,IAAJ,sBAAYF,EAAQnD,IAApB,YAA6B3B,KAF7B,IAAIgF,IAAIhF,GAIpB8E,EASJ,IAAMG,EAAoBC,mBANjC,SAAoBC,EAAOC,GACvB,OAAOD,EAAME,QAAO,SAAA7G,GAAK,OACrB4E,EAAc5E,GAAO2E,cAAcmC,SAASF,EAASjC,qBAIR,6D,OCNrD,IAWeoC,eAXS,SAACC,GAAD,MAAY,CAChCC,SAAUD,EAAMxF,KAChBiB,WAAYuE,EAAME,IAAIzE,cASXsE,EA7Gf,YAAmD,IAAlCE,EAAiC,EAAjCA,SAAU/E,EAAuB,EAAvBA,SAAUO,EAAa,EAAbA,WAI1BZ,EAAgFoF,EAAhFpF,aAAcL,EAAkEyF,EAAlEzF,KAAM2F,EAA4DF,EAA5DE,YAAaC,EAA+CH,EAA/CG,aAAcC,EAAiCJ,EAAjCI,oBAAqBC,EAAYL,EAAZK,SACrEC,EAAOF,EAAsBD,EAAazB,OAASnE,EAAKK,GAAc2F,KAL9B,EASNC,mBAAS,IATH,mBASvCC,EATuC,KASzBC,EATyB,KAiB9CzD,qBAAU,WACFmD,GACAM,EAAgB,MAErB,CAACN,IASJnD,qBAAU,WACN,IAAI0D,GAAY,EAChB,IACI,IAAMC,EAAkBV,EAAYN,QAAO,SAAA7E,GAAG,OAAK0F,EAAaZ,SAAS9E,ODD9E,SAAyB8F,GAC5B,IAAMC,EAAWD,EAAOE,IAAIlD,GAC5B,OAAOE,QAAQiD,WAAWF,ICAlBG,CAAgBL,GAAiBM,MAAK,WAC9BP,GACAD,EAAgB,GAAD,mBAAKD,GAAL,YAAsBG,QAG/C,MAAOlG,GACLO,EAASI,EAASX,IAGtB,OAAO,WACHiG,GAAY,KAEjB,CAACT,IASJ,IAqBMiB,EAAOjB,EAAYa,KAAI,SAAAtI,GACzB,IAAM2I,EAAQ,CACV3I,MACAyD,IAAKzD,EACLkD,WAAYwE,EAAaN,SAASpH,GAClCiD,SAAU+E,EAAaZ,SAASpH,GAChC+C,aACAP,YAEJ,OAAQ,kBAAC,EAAUmG,MAGjBC,EAAsB,CACxBpF,UAAU,UAAD,OAAYT,EAAa,eAAiB,IACnDmB,cAnCkB,WAClB,IAAK,IACM+B,EAAUwB,EAAVxB,OACHA,EAAS4B,GAELrF,EADAmF,ELrBb,SAA2BF,GAC9B,MAAO,CACH7F,KAAMb,EAAKM,oBACXoG,eKmBqBoB,CAAkBnB,EAAa3C,MAAMkB,EAAQA,EAAS2B,IAEtDxF,KAGnB,MAAOH,GACLO,EAASI,EAASX,MAyBtBO,WACAyB,SAAUyE,GAGd,OAAQ,kBAAC,EAAmBE,M,gBCKhC,IAaevB,eAbS,SAACC,GAAD,MAAY,CAChCwB,UAAWxB,EAAME,IAAIsB,UACrBnB,oBAAqBL,EAAMxF,KAAK6F,oBAChC5E,WAAYuE,EAAME,IAAIzE,cAUXsE,EA7Gf,YAAwE,IAAxD7E,EAAuD,EAAvDA,SAAUsG,EAA6C,EAA7CA,UAAW/F,EAAkC,EAAlCA,WAAY4E,EAAsB,EAAtBA,oBAAsB,EAInCI,oBAAS,GAJ0B,mBAI5DgB,EAJ4D,KAIlDC,EAJkD,OAKrCjB,mBAAS,GAL4B,mBAK5DkB,EAL4D,KAKnDC,EALmD,KAanE1E,qBAAU,WACN,IAAM2E,EAAeC,oBAAS,WAC1BF,EAAWG,OAAOJ,WACnB,KAGH,OAFAI,OAAO3D,iBAAiB,SAAUyD,GAE3B,WACHE,OAAOC,oBAAoB,SAAUH,MAE1C,IAQH,IAmCII,EAAY,OAIhB,OAHIN,EAAU,IAAGM,GAAa,WAC1BxG,IAAYwG,GAAa,gBAGzB,oCACI,yBAAK/F,UAAW+F,GAhBlBxG,EAEI,0BAAMS,UAAS,YAAeE,QAAS,kBAAMlB,EAASM,GAAc,MAC/D,kBAAC,IAAD,CAAMe,KAAMC,IAAU0F,gBAI5B,KAWG,0BAAMhG,UAAS,YAAeE,QAAS,kBAAMsF,GAAaD,KACvD,kBAAC,IAAD,CAAMlF,KAAMC,IAAU2F,SA5B7BV,EAEI,yBAAKvF,UAAW,oBAAqBE,QAAS,kBAAMsF,GAAY,MAGjE,KA2BH,kBAACU,EAAA,EAAD,CAAeC,GAAIZ,EAAUa,eAAa,EAACC,cAAY,EAACC,WAAW,SAASC,QAAS,KACjF,6BACI,4BACI,wBAAIvG,UAAWmE,EAAsB,YAAc,IAC/C,kBAAC,IAAD,CAAM9D,KAAMC,IAAUC,OACtB,kBAAC,IAAD,CAAQiG,QAASrC,EAAqBsC,SArDvC,WACnB,IACIzH,EAASE,GAAe,IACxBF,GNNwB0H,GMMMvC,ENL/B,CACH/F,KAAMb,EAAKK,mBACX8I,sBMIIlB,GAAY,GACd,MAAO/G,GACLO,EAASI,EAASX,INTvB,IAA6BiI,MM0DZ,4BACI,kBAAC,IAAD,CAAMrG,KAAMC,IAAUqG,OACtB,kBAAC,IAAD,CAAQH,QAASlB,EAAWmB,SAAU,kBAAMzH,ELvGjE,SAAsBsG,GACzB,MAAO,CACHlH,KAAMN,EAAIE,eACVsH,aKoGyEsB,EAActB,e,gDC5EhFuB,G,mBA5BX,WAAY1B,GAAQ,qEACVA,I,+EAGQ9F,EAAOyH,GACrBC,KAAK5B,MAAMnG,SAASI,EAAS,CAACC,QAAMyH,iB,+BAIpC,OAAIC,KAAK5B,MAAM6B,SAEP,0BAAMhH,UAAW,kBACb,yBAAKA,UAAW,WACZ,kBAAC,IAAD,CAAMK,KAAMC,IAAU2G,MAAOC,OAAQC,IAAOC,SAC5C,4DACA,yDAKTL,KAAK5B,MAAM1E,a,GArBE4G,IAAMC,Y,OCgOnBC,OAlNf,YAAmF,IAAlE9D,EAAiE,EAAjEA,MAAO+D,EAA0D,EAA1DA,kBAAmBC,EAAuC,EAAvCA,cAAetI,EAAwB,EAAxBA,YAAaH,EAAW,EAAXA,SAK7D0I,EAAWzK,OAAOC,OAAO,CAC3ByK,GAAI,GACJC,KAAM,GACNC,MAAO,KARmE,EAa9CtD,mBAAS,IAbqC,mBAavEb,EAbuE,KAa7DoE,EAb6D,OAcxCvD,oBAAS,GAd+B,mBAcvEwD,EAduE,KAc1DC,EAd0D,OAepCzD,mBAAS,IAf2B,mBAevE0D,EAfuE,KAexDC,EAfwD,OAgBpC3D,mBAAS,GAhB2B,mBAgBvE4D,EAhBuE,KAgBxDC,EAhBwD,OAiBxC7D,mBAbV,oBAJkD,mBAiBvE8D,EAjBuE,KAiB1DC,EAjB0D,KAqBxEC,EAAqBC,iBAAO,MAC5BC,EAAgBD,iBAAO,MAQ7BxH,qBAAU,WACN,IAAK,IACM0H,EAAWD,EAAXC,QACHA,GAASA,EAAQ3I,wBAAuB,GAC9C,MAAOtB,GACLO,EAASI,EAASX,OAEvB,CAAC0J,IAOJnH,qBAAU,WACN,IAAM2H,EAAc,SAAA/I,GACX2I,EAAmBG,QAAQE,SAAShJ,EAAEE,SACvCkI,GAAe,IAKvB,OAFAa,SAAS3G,iBAAiB,YAAayG,GAEhC,WACHE,SAAS/C,oBAAoB,YAAa6C,MAE/C,IAMH3H,qBAAU,WACN,IACIkH,EAAiBzE,GACnB,MAAOhF,GACLO,EAASI,EAASX,OAEvB,CAACgF,IAMJzC,qBAAU,WACN,IAAMiH,EAAgB1E,EAAkBE,EAAMC,GAC9CwE,EAAiBD,KAClB,CAACvE,IAMJ1C,qBAAU,WACD+G,GAAaO,EA/EM,sBAgFzB,CAACP,IASJ,IAeMe,EAAe,SAAA7I,GACjB,IACI,IAAMnD,EJnCX,SAAoBmD,GACvB,OAAO+C,KAAK+F,MAAM9I,GIkCI+I,CAAW/I,GACzB6H,EAAYpG,EAAc5E,IAC1BkL,GAAe,GACfR,EAAkB1K,GAClBsL,EAAiB,GACnB,MAAO3J,GACLO,EAASI,EAASX,MAmE1B,OACI,yBACIuB,UAAW,mBACXG,MAAO,CAAC,MAAUhB,EAAc,MAAQ,OACxC8B,IAAKsH,GACL,kBAAC,IAAD,CAAMlI,KAAMC,IAAU2I,SACtB,2BACI7K,KAAK,OACL4B,WAAY+H,EAAc,QAAU,KAAOA,GAAeE,EAAcxF,OAAS,YAAc,IAC/FyG,MAAOxF,EACPyF,YAAY,EACZC,QArEU,SAAAxJ,GAClB,IAAK,IAEGyJ,EADG5G,EAAUwF,EAAVxF,OAEP,OAAO7C,EAAE0J,SACL,KAAK5B,EAASE,KACVyB,EAAWnI,EAAIiH,EAAgB,EAAG1F,GAClC2F,EAAiBiB,GACjBf,EAAe5G,EAAcuG,EAAcoB,KAC3C,MACJ,KAAK3B,EAASC,GACV0B,EAAWnI,EAAIiH,EAAgB,EAAG1F,GAClC2F,EAAiBiB,GACjBf,EAAe5G,EAAcuG,EAAcoB,KAC3C,MACJ,KAAK3B,EAASG,MACViB,EAAa/F,EAAWkF,EAAcE,MAKhD,MAAO1J,GACLO,EAASI,EAASX,MAgDdgI,SAtGW,SAAA7G,GACnB,IACIkI,EAAYlI,EAAEE,OAAOoJ,OACrBlB,GAAe,IACVpI,EAAEE,OAAOoJ,OAASjB,EAAcxF,QAAQ6F,EAAe5G,EAAcuG,EAAc,KAC1F,MAAOxJ,GACLO,EAASI,EAASX,MAiGd4J,YAAaA,EACbkB,QAAS9B,IAzCC,WAClB,GAAIM,GAAeE,EAAcxF,OAAQ,CACrC,IAAM+G,EAAUvB,EAAcnD,KAAI,SAAChI,EAAM2M,GACrC,IAAMC,EAAM3G,EAAWjG,GACjB6M,EAAQjI,EAAc5E,GACtBqI,EAAQ,CACVnF,UAAW,SACXC,IAAKyJ,EACL,aAAcA,GAMlB,OAJID,IAAMtB,IACNhD,EAAMnF,WAAa,YACnBmF,EAAMlE,IAAMwH,GAER,yCAAStD,EAAT,CAAgBjF,QAAS,SAAAN,GAAC,OAAIkJ,EAAalJ,EAAEE,OAAO8J,QAAQV,UAASS,MAEjF,OACI,yBAAK3J,UAAW,qBACZ,yBAAKA,UAAU,WACVwJ,IAKjB,OAAO,KAkBFK,KClNb,SAASxL,GAAc1B,GACnB,MAAO,CACHyB,KAAMd,EAAaF,QACnB0M,OAAQnN,EAAI4B,SAIpB,SAASC,GAAcC,GACnB,MAAO,CACHL,KAAMd,EAAaD,QACnBoB,O,cC+IR,IAMeoF,gBANS,SAACC,GAAD,MAAY,CAChCC,SAAUD,EAAMxF,KAChBwL,OAAQhG,EAAMgG,OAAOA,OACrBC,SAAUjG,EAAME,OAGLH,EA5If,YAAsD,IAAxCkG,EAAuC,EAAvCA,SAAUhG,EAA6B,EAA7BA,SAAU+F,EAAmB,EAAnBA,OAAQ9K,EAAW,EAAXA,SAI/BG,EAAgD4K,EAAhD5K,YAAamG,EAAmCyE,EAAnCzE,UAAW/F,EAAwBwK,EAAxBxK,WAAYyH,EAAY+C,EAAZ/C,SACpC1I,EAAwDyF,EAAxDzF,KAAMK,EAAkDoF,EAAlDpF,aAAcwF,EAAoCJ,EAApCI,oBAAqBF,EAAeF,EAAfE,YAQhDjD,qBAAU,WACN,IACIhC,EDnBR,uCAAO,WAAOA,GAAP,eAAAvC,EAAA,6DACHuC,EArBG,CACHZ,KAAMd,EAAaH,UAmBhB,kBXWAZ,EADK,uCWVL,OAIoB,aADbI,EAHP,QAISsC,OACJD,EAASX,GAAc1B,IAEvBqC,EAASR,GAAc7B,IAP5B,gDAUCqC,EAASR,GAAc,EAAD,KAVvB,yDAAP,mDAAM,ICoBA,MAAOC,GACLO,EAASI,EAASX,OAEvB,IAMHuC,qBAAU,WAEF6H,SAASmB,cAAc,QAAQhK,UAD/BsF,EAC2C,OAGJ,UAC5C,CAACA,IAMJtE,qBAAU,WACFzB,EACAsJ,SAASmB,cAAc,QAAQ7J,MAAM8J,YAAY,gBAAiB,QAGtEpB,SAASmB,cAAc,QAAQ7J,MAAM8J,YAAY,gBAAiB,UACnE,CAAC1K,IAWJ,IAAMiI,EAAiB,uCAAG,iCAAA/K,EAAA,yDAAQK,EAAR,EAAQA,MAAMC,EAAd,EAAcA,SAAd,UAEZkD,EAAM8C,EAAW,CAACjG,QAAMC,gBACjBuB,EAHK,gCAIRU,EAASD,EAAQjC,EAAOC,IAJhB,uBAMZiC,EAASN,EAAgBuB,IANb,OAOlBjB,EAASJ,KAPS,kDASlBI,EAASI,EAAS,EAAD,KATC,0DAAH,sDA+BjB8K,EAAYC,mBAAQ,WACtB,OAAIxL,GAAgBL,EAAKK,IAAiBL,EAAKK,GAAc2F,KACjD,kBAAC,EAAD,MAEL,OACR,CAAChG,EAAMK,IAQJyL,EACJ,yBAAKpK,UAAW,gBACZ,+CACA,kBAAC,IAAD,CAAMK,KAAMC,IAAU+J,aACtB,6DAIAC,EAAc,CAChB7G,MAAOqG,EACPtC,oBACAC,cAtCkB,WAClB,IACIzI,EAASE,GAAe,IAC1B,MAAOT,GACLO,EAASI,EAASX,MAmCtBU,cACAH,YAGJ,OACI,kBAAC,EAAD,CAAeA,SAAUA,EAAUgI,SAAUA,GACzC,0BAAMhH,UAAWT,EAAa,aAAe,IACzC,yBAAKS,UAAS,0BAAqBb,EAAc,eAAiB,KAC9D,kBAAC,GAAWmL,IAEdnG,IAAwBF,EAAYxB,OAAU2H,EAAcF,GAElE,kBAAC,EAAD,U,qCCnJNK,GAAgB,CAClBC,YAAY,EACZlM,KAAM,GACN8F,SAAU,EACVzF,aAAc,KACdsF,YAAa,GACbC,aAAc,GACdC,qBAAqB,EACrB1F,IAAK,MCTH8L,GAAgB,CAClBC,YAAY,EACZV,OAAQ,GACRrL,IAAK,MAUT,SAASgM,GAAaX,GAClB,IAAMtH,EAAS,GAQf,OAPAvF,OAAOyN,QAAQZ,GAAQa,SAAQ,YAAwB,IAAD,mBAArB7N,EAAqB,KAAf8N,EAAe,KAC9CA,EAAUnI,OACVmI,EAAUD,SAAQ,SAAA5N,GAAQ,OAAIyF,EAAOM,KAAK,CAAChG,QAAOC,gBAElDyF,EAAOM,KAAK,CAAChG,QAAOC,SAAU,UAG/ByF,EAGI,ICzBT+H,GAAgB,CAClBpL,aAAa,EACbmG,WAAW,EACX/F,YAAY,EACZyH,UAAU,EACV3H,MAAO,MCFIwL,gBAAgB,CAACvM,KHSjB,WAAwC,IAAvCwM,EAAsC,uDAA1BP,GAAeQ,EAAW,uCAC7CzM,EAA2DwM,EAA3DxM,KAAM8F,EAAqD0G,EAArD1G,SAAUzF,EAA2CmM,EAA3CnM,aAAcsF,EAA6B6G,EAA7B7G,YAAaC,EAAgB4G,EAAhB5G,aAChD,OAAO6G,EAAO3M,MACV,KAAKpB,EAAWG,QACZ,OAAO,gBACA2N,EADP,CAEIN,YAAY,EACZ/L,IAAK,OAEb,KAAKzB,EAAWI,QAEZ,OADAkB,EAAO4E,EAAW4H,EAAUxM,KAAMyM,GAC3B,gBACAD,EADP,CAEIN,YAAY,EACZlM,OACAG,IAAK,OAEb,KAAKzB,EAAWK,QACZ,OAAO,gBACAyN,EADP,CAEIN,YAAY,EACZ/L,IAAKsM,EAAOtM,MAEpB,KAAKlB,EAAKC,kBACN,OAAO,gBACAsN,EADP,CAEInM,aAAcoM,EAAOpM,aACrBwF,qBAAqB,EACrBF,YAAa,KAErB,KAAK1G,EAAKE,gBAEN,OADAwG,EAAc7B,EAAWgC,EAAU4G,MAAMC,KAAK3M,EAAKK,IAAgBsF,GAC5D,gBACA6G,EADP,CAEI7G,gBAER,KAAK1G,EAAKM,oBACN,OAAO,gBACAiN,EADP,CAEI7G,YAAY,GAAD,mBAAMA,GAAN,YAAsB8G,EAAO9G,gBAEhD,KAAK1G,EAAKG,aACN,OAAO,gBACAoN,EADP,CAEI5G,aAAa,GAAD,mBAAMA,GAAN,CAAoB6G,EAAOjM,QAE/C,KAAKvB,EAAKI,gBACN,IAAMuN,EAAe,YAAOhH,GACtBiH,EAAQD,EAAgBE,WAAU,SAAA1B,GAAG,OAAIA,IAAQqB,EAAOjM,OAI9D,OAHIqM,GAAS,GACTD,EAAgBrI,OAAOsI,EAAM,GAE1B,gBACAL,EADP,CAEI5G,aAAcgH,IAEtB,KAAK3N,EAAKK,mBACN,OAAImN,EAAOrE,iBACA,gBACAoE,EADP,CAEI3G,qBAAqB,EACrBF,YAAaC,EAAa3C,MAAM,EAAE6C,MAG1CH,EAAc,GACVtF,GAAgBL,EAAKK,KACrBsF,EAAc+G,MAAMC,KAAK3M,EAAKK,IAAe4C,MAAM,EAAE6C,IAElD,gBACA0G,EADP,CAEI3G,qBAAqB,EACrBF,iBAER,QACI,OAAO6G,IGnFmBhB,OFsBvB,WAAwC,IAAvCgB,EAAsC,uDAA1BP,GAAeQ,EAAW,uCAClD,OAAOA,EAAO3M,MACV,KAAKd,EAAaH,QACd,OAAO,gBACA2N,EADP,CAEIN,YAAY,EACZV,OAAQ,GACRrL,IAAK,OAEb,KAAKnB,EAAaF,QACd,IAAM0M,EAASW,GAAaM,EAAOjB,QACnC,OAAO,gBACAgB,EADP,CAEIN,YAAY,EACZV,SACArL,IAAK,OAEb,KAAKnB,EAAaD,QACd,OAAO,gBACAyN,EADP,CAEIN,YAAY,EACZV,OAAQ,GACRrL,IAAKsM,EAAOtM,MAEpB,QACI,OAAOqM,IE/C2B9G,IDK/B,WAAwC,IAAvC8G,EAAsC,uDAA1BP,GAAeQ,EAAW,uCAClD,OAAOA,EAAO3M,MACV,KAAKN,EAAIC,iBACL,OAAO,gBACA+M,EADP,CAEI3L,YAAa4L,EAAO5L,cAE5B,KAAKrB,EAAIE,eACL,OAAO,gBACA8M,EADP,CAEIxF,UAAWyF,EAAOzF,YAE1B,KAAKxH,EAAIG,gBACL,OAAO,gBACA6M,EADP,CAEIvL,WAAYwL,EAAOxL,aAE3B,KAAKzB,EAAII,UACL,OAAO,gBACA4M,EADP,CAEI9D,UAAU,EACV3H,MAAO0L,EAAO1L,QAEtB,QACI,OAAOyL,M,SE5BbO,GAAaC,aAAgBC,KAAQC,MAE5BC,gBAAYC,GAAcL,ICDzCM,IAASC,OAAO,kBAAC,IAAD,CAAUC,MAAOA,IAAO,kBAAC,GAAD,OAAmBhD,SAASiD,eAAe,W","file":"static/js/main.120271be.chunk.js","sourcesContent":["/**\r\n * @param url - the url to fetch\r\n * @returns {Promise<any>}\r\n * @desc A utility function for fetching the JSON\r\n * response from an endpoint.\r\n */\r\nasync function getJSON(url) {\r\n    try {\r\n        const res = await fetch(url);\r\n        return await res.json();\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}\r\n\r\n/**\r\n * @param breed\r\n * @param subBreed\r\n * @returns {Promise<any>}\r\n * @desc Makes a request to the Dogs API by breed and sub-breed.\r\n * Dogs API: https://dog.ceo/dog-api/documentation/\r\n */\r\nexport function fetchDogs(breed, subBreed = null) {\r\n    let url = `https://dog.ceo/api/breed/${breed}/`;\r\n    if (subBreed) url += `${subBreed}/`;\r\n    url += \"images\";\r\n    return getJSON(url);\r\n}\r\n\r\n/**\r\n * @returns {Promise<any>}\r\n * @desc Makes a request to the Dogs API for the list of breeds.\r\n */\r\nexport function fetchBreeds() {\r\n    const url = \"https://dog.ceo/api/breeds/list/all\";\r\n    return getJSON(url);\r\n}","export const FETCH_DOGS = Object.freeze({\r\n    INITIAL: \"FETCH_DOGS_INITIAL\",\r\n    SUCCESS: \"FETCH_DOGS_SUCCESS\",\r\n    FAILURE: \"FETCH_DOGS_FAILURE\"\r\n});\r\n\r\nexport const FETCH_BREEDS = Object.freeze({\r\n    INITIAL: \"FETCH_BREEDS_INITIAL\",\r\n    SUCCESS: \"FETCH_BREEDS_SUCCESS\",\r\n    FAILURE: \"FETCH_BREEDS_FAILURE\"\r\n});\r\n\r\nexport const DOGS = Object.freeze({\r\n    SET_CURRENT_BREED: \"DOGS_SET_CURRENT_BREED\",\r\n    GET_RANDOM_DOGS: \"DOGS_GET_RANDOM_DOGS\",\r\n    ADD_FAVORITE: \"DOGS_ADD_FAVORITE\",\r\n    REMOVE_FAVORITE: \"DOGS_REMOVE_FAVORITE\",\r\n    SET_SHOW_FAVORITES: \"DOGS_SET_SHOW_FAVORITES\",\r\n    APPEND_CURRENT_DOGS: \"DOGS_APPEND_CURRENT_DOGS\"\r\n});\r\n\r\nexport const APP = Object.freeze({\r\n    SET_FIRST_SEARCH: \"APP_SET_FIRST_SEARCH\",\r\n    SET_DARK_THEME: \"APP_SET_DARK_THEME\",\r\n    SET_SINGLE_VIEW: \"APP_SET_SINGLE_VIEW\",\r\n    SET_ERROR: \"APP_SET_ERROR\"\r\n});","import {fetchDogs} from \"../../api\";\r\nimport {DOGS, FETCH_DOGS} from \"./actionTypes\";\r\n\r\nfunction initialAction() {\r\n    return {\r\n        type: FETCH_DOGS.INITIAL\r\n    }\r\n}\r\n\r\nfunction successAction({breed,subBreed,res}) {\r\n    return {\r\n        type: FETCH_DOGS.SUCCESS,\r\n        breed,\r\n        subBreed,\r\n        dogs: res.message\r\n    }\r\n}\r\n\r\nfunction failureAction(err) {\r\n    return {\r\n        type: FETCH_DOGS.FAILURE,\r\n        err\r\n    }\r\n}\r\n\r\nexport function setCurrentBreed(currentBreed) {\r\n    return {\r\n        type: DOGS.SET_CURRENT_BREED,\r\n        currentBreed\r\n    };\r\n}\r\n\r\nexport function getRandomDogs() {\r\n    return {\r\n        type: DOGS.GET_RANDOM_DOGS\r\n    };\r\n}\r\n\r\nexport function removeFavorite(dog) {\r\n    return {\r\n        type: DOGS.REMOVE_FAVORITE,\r\n        dog\r\n    };\r\n}\r\n\r\nexport function addFavorite(dog) {\r\n    return {\r\n        type: DOGS.ADD_FAVORITE,\r\n        dog\r\n    };\r\n}\r\n\r\nexport function setShowFavoriteDogs(showFavoriteDogs) {\r\n    return {\r\n        type: DOGS.SET_SHOW_FAVORITES,\r\n        showFavoriteDogs\r\n    };\r\n}\r\n\r\nexport function appendCurrentDogs(currentDogs) {\r\n    return {\r\n        type: DOGS.APPEND_CURRENT_DOGS,\r\n        currentDogs\r\n    }\r\n}\r\n\r\nexport function getDogs(breed, subBreed=null) {\r\n    return async (dispatch) => {\r\n        dispatch(initialAction());\r\n        try {\r\n            const res = await fetchDogs(breed,subBreed);\r\n            if (res.status === \"success\") {\r\n                dispatch(successAction({breed,subBreed,res}));\r\n            } else {\r\n                dispatch(failureAction(res));\r\n            }\r\n        } catch (e) {\r\n            dispatch(failureAction(e))\r\n        }\r\n    };\r\n}","import {APP} from \"./actionTypes\";\r\n\r\nexport function setFirstSearch(firstSearch) {\r\n    return {\r\n        type: APP.SET_FIRST_SEARCH,\r\n        firstSearch\r\n    };\r\n}\r\n\r\nexport function setDarkTheme(darkTheme) {\r\n    return {\r\n        type: APP.SET_DARK_THEME,\r\n        darkTheme\r\n    };\r\n}\r\n\r\nexport function setError(error) {\r\n    return {\r\n        type: APP.SET_ERROR,\r\n        error\r\n    }\r\n}\r\n\r\nexport function setSingleView(singleView) {\r\n    return {\r\n        type: APP.SET_SINGLE_VIEW,\r\n        singleView\r\n    };\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {addFavorite, removeFavorite} from \"../../../redux/actions/dogs\";\r\nimport {setSingleView, setError} from \"../../../redux/actions/app\";\r\nimport {Icon} from \"@blueprintjs/core\";\r\nimport {IconNames} from \"@blueprintjs/icons\";\r\nimport './photo.scss';\r\n\r\n/**\r\n * @param url - the image to display\r\n * @param isLoaded - whether the image has finished loading\r\n * @param isFavorite - whether the image is currently a favorite image\r\n * @param singleView - whether the app state is in single view\r\n * @param dispatch\r\n * @desc A photo component\r\n */\r\nfunction Photo({url, isLoaded, isFavorite, singleView, dispatch}) {\r\n\r\n    // HANDLERS --------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @param e\r\n     * @desc A click handler for a photo.\r\n     * If the app is in single view, clicking\r\n     * on a photo initiates favoriting, else\r\n     * it sets single view to true.\r\n     */\r\n    const handleOnClick = async e => {\r\n        try {\r\n            if (singleView) {\r\n                if (isFavorite) {\r\n                    dispatch(removeFavorite(url));\r\n                } else {\r\n                    dispatch(addFavorite(url));\r\n                }\r\n            } else {\r\n                e.persist();\r\n                await dispatch(setSingleView(true));\r\n                e.target.scrollIntoViewIfNeeded();\r\n            }\r\n        } catch (err) {\r\n            dispatch(setError(err));\r\n        }\r\n\r\n    };\r\n\r\n    // COMPONENTS ------------------------------------------------------------------------------------------------------\r\n\r\n    const renderFavoriteButton = () => {\r\n        if (singleView) {\r\n            return (\r\n                <div className={\"buttons\"}>\r\n                    <Icon className={isFavorite ? \"favorite\" : \"\"} icon={IconNames.STAR}/>\r\n                </div>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * @desc Until the photo finished loading, render a default background.\r\n     */\r\n    if (isLoaded) {\r\n        return  (\r\n            <div className={`photo`} key={url} onClick={handleOnClick}>\r\n                <div className={`card-container`} style={{backgroundImage: `url(${url})`}}/>\r\n                {renderFavoriteButton()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={\"photo inactive\"}>\r\n            <div className={\"card-container\"}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nPhoto.propTypes = {\r\n    url: PropTypes.string,\r\n    isLoaded: PropTypes.bool,\r\n    isFavorite: PropTypes.bool,\r\n    dispatch: PropTypes.func\r\n};\r\n\r\nexport default Photo;","import React, {useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {useInView} from 'react-intersection-observer';\r\nimport {debounce} from \"lodash\";\r\n\r\n/**\r\n * @param children\r\n * @param handleLastRow {function} - handler to call on last row\r\n * @param dispatch\r\n * @param className {string?}\r\n * @desc An infinite scrolling wrapper component.\r\n */\r\nfunction InfiniteScroll({children, handleLastRow, dispatch, className = ''}) {\r\n\r\n    // CONSTANTS -------------------------------------------------------------------------------------------------------\r\n\r\n    const [lastRowRef, lastRowInView] = useInView();\r\n    const onLastRow = debounce(handleLastRow, 250);\r\n\r\n    // SIDE EFFECTS ----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @desc Whenever the last row is in view,\r\n     * call the debounced last row handler.\r\n     */\r\n    useEffect(() => {\r\n        if (lastRowInView) {\r\n            onLastRow();\r\n        }\r\n    }, [lastRowInView]);\r\n\r\n    // COMPONENTS ------------------------------------------------------------------------------------------------------\r\n\r\n    return (\r\n        <div className={className}>\r\n            {children}\r\n            <div ref={lastRowRef}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nInfiniteScroll.propTypes = {\r\n    handleLastRow: PropTypes.func,\r\n    className: PropTypes.string,\r\n    dispatch: PropTypes.func\r\n};\r\n\r\nexport default InfiniteScroll;","import {cloneDeep, random, difference, memoize} from \"lodash\";\r\n\r\n/**\r\n * @param num\r\n * @param n\r\n * @returns {number}\r\n * @desc Javascript's native modulo does\r\n * not work as expected for negative numbers.\r\n * This is a work-around.\r\n */\r\nexport function mod(num,n) {\r\n    return ((num % n) + n) % n;\r\n}\r\n\r\n/**\r\n * @param str\r\n * @returns {string}\r\n * @desc Capitalize a single word.\r\n */\r\nfunction capitalize(str) {\r\n    return str.slice(0,1).toUpperCase() + str.slice(1).toLowerCase();\r\n}\r\n\r\n/**\r\n * @param breed\r\n * @param subBreed\r\n * @returns {string}\r\n * @desc Prettify a breed for display.\r\n */\r\nexport function prettifyBreed({breed, subBreed = null}) {\r\n    return `${subBreed ? capitalize(subBreed) : \"\"} ${capitalize(breed)}`.trim();\r\n}\r\n\r\n/**\r\n * @param src\r\n * @returns {Promise<unknown>}\r\n * @desc Promisify an image src which\r\n * resolves when the image has loaded.\r\n */\r\nexport function promisifyImage(src) {\r\n    return new Promise(resolve => {\r\n        const img = new Image();\r\n        img.addEventListener(\"load\", resolve);\r\n        img.setAttribute(\"src\", src);\r\n    });\r\n}\r\n\r\n/**\r\n * @param photos\r\n * @desc Promisify a list of photos which\r\n * resolves when all of the photos have settled\r\n * (rejected or resolved).\r\n */\r\nexport function promisifyPhotos(photos) {\r\n    const promises = photos.map(promisifyImage);\r\n    return Promise.allSettled(promises);\r\n}\r\n\r\n/**\r\n * @param n {int} - the amount of random dogs to generate\r\n * @param dogs {string[]} - the original dog array\r\n * @param prev {string[]} - the previous array of dogs\r\n * @desc Generate n more unique random dogs that do not\r\n * exists in the previous array of dogs.\r\n */\r\nexport function randomDogs(n, dogs, prev=[]) {\r\n    const diff = difference(dogs, prev);\r\n    const result = [...prev];\r\n    while(n > 0) {\r\n        if (diff.length === 0) break;\r\n        const randIndex = random(0,diff.length-1);\r\n        const randValue = diff.splice(randIndex, 1);\r\n        if (randValue.length) {\r\n            result.push(randValue[0]);\r\n            n--;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * @param breed\r\n * @param subBreed\r\n * @desc Use this function to convert a\r\n * breed into a key. Ensures the same key is\r\n * used throughout the app.\r\n */\r\nexport function breedToKey({breed, subBreed}) {\r\n    return JSON.stringify({breed, subBreed});\r\n}\r\n\r\n/**\r\n * @param key {string}\r\n * @desc Use this function to convert a key\r\n * to a breed.\r\n */\r\nexport function keyToBreed(key) {\r\n    return JSON.parse(key);\r\n}\r\n\r\n/**\r\n * @param prevDogs\r\n * @param breed\r\n * @param subBreed\r\n * @param dogs\r\n * @desc Update a previous dog object with a new\r\n * dog object. A set is used to ensure uniqueness.\r\n */\r\nexport function updateDogs(prevDogs, {breed, subBreed, dogs}) {\r\n    const key = breedToKey({breed, subBreed});\r\n    const newDogs = cloneDeep(prevDogs);\r\n    if (!(key in newDogs)) {\r\n        newDogs[key] = new Set(dogs);\r\n    } else {\r\n        newDogs[key] = new Set([...newDogs[key], ...dogs]);\r\n    }\r\n    return newDogs;\r\n}\r\n\r\nfunction filterList(items, inputVal) {\r\n    return items.filter(breed => // substring match\r\n        prettifyBreed(breed).toLowerCase().includes(inputVal.toLowerCase())\r\n    );\r\n}\r\n\r\nexport const memoizeFilterList = memoize(filterList, (...args) => args[1]);\r\n\r\n\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\nimport Photo from \"../../non-connected/photo/photo\";\r\nimport InfiniteScroll from \"../../non-connected/infinite-scroll/infinite-scroll\";\r\nimport {getRandomDogs, appendCurrentDogs} from \"../../../redux/actions/dogs\";\r\nimport {setError} from \"../../../redux/actions/app\";\r\nimport {promisifyPhotos} from \"../../../util/util\";\r\nimport './photos.scss';\r\n\r\n/**\r\n * @param dogState\r\n * @param dispatch\r\n * @param singleView - whether the current app state is in single view\r\n * @desc Photos is a connected component for displaying\r\n * the current dogs from the dog state as photos.\r\n *\r\n * Features:\r\n *  - maintains a loaded photos state so that each page is loaded simultaneously\r\n *  - renders dog photos with infinite scrolling\r\n */\r\nfunction Photos({dogState, dispatch, singleView}) {\r\n\r\n    // CONSTANTS -------------------------------------------------------------------------------------------------------\r\n\r\n    const {currentBreed, dogs, currentDogs, favoriteDogs, showingFavoriteDogs, pageSize} = dogState;\r\n    const max = (showingFavoriteDogs ? favoriteDogs.length : dogs[currentBreed].size);\r\n\r\n    // COMPONENT STATE -------------------------------------------------------------------------------------------------\r\n\r\n    const [loadedPhotos, setLoadedPhotos] = useState([]);\r\n\r\n    // SIDE EFFECTS ----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @desc Whenever the app state for showing favorite\r\n     * dogs changes and if it is true, clear the loaded photos.\r\n     */\r\n    useEffect(() => {\r\n        if (showingFavoriteDogs) {\r\n            setLoadedPhotos([]); // reset\r\n        }\r\n    }, [showingFavoriteDogs]);\r\n\r\n    /**\r\n     * @desc Whenever current dogs changes,\r\n     * wait for all of the not yet loaded\r\n     * dog photos to load, then update the\r\n     * loaded photos state with all of the\r\n     * dogs simultaneously.\r\n     */\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n        try {\r\n            const notLoadedPhotos = currentDogs.filter(dog => !loadedPhotos.includes(dog));\r\n            promisifyPhotos(notLoadedPhotos).then(() => {\r\n                if (isMounted) {\r\n                    setLoadedPhotos([...loadedPhotos, ...notLoadedPhotos]);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            dispatch(setError(err));\r\n        }\r\n\r\n        return () => {\r\n            isMounted = false;\r\n        }\r\n    }, [currentDogs]);\r\n\r\n    // HANDLERS --------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @desc A handler to call when the last\r\n     * row inside of an infinite scroll is\r\n     * in view.\r\n     */\r\n    const handleLastRow = () => {\r\n        try {\r\n            const {length} = currentDogs;\r\n            if (length < max) {\r\n                if (showingFavoriteDogs) {\r\n                    dispatch(appendCurrentDogs(favoriteDogs.slice(length, length + pageSize)));\r\n                } else {\r\n                    dispatch(getRandomDogs());\r\n                }\r\n            }\r\n        } catch (err) {\r\n            dispatch(setError(err));\r\n        }\r\n    };\r\n\r\n    // COMPONENTS ------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @desc Prepares a list of dog photos to be rendered\r\n     * inside of an infinite scrolling component.\r\n     */\r\n    const rows = currentDogs.map(url => {\r\n        const props = {\r\n            url,\r\n            key: url,\r\n            isFavorite: favoriteDogs.includes(url),\r\n            isLoaded: loadedPhotos.includes(url),\r\n            singleView,\r\n            dispatch\r\n        };\r\n        return (<Photo {...props}/>);\r\n    });\r\n\r\n    const infiniteScrollProps = {\r\n        className: `photos ${singleView ? \" single-view\" : \"\"}`,\r\n        handleLastRow,\r\n        dispatch,\r\n        children: rows\r\n    };\r\n\r\n    return (<InfiniteScroll {...infiniteScrollProps}/>);\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    dogState: state.dogs,\r\n    singleView: state.app.singleView\r\n});\r\n\r\nPhotos.propTypes = {\r\n    dogState: PropTypes.object,\r\n    dispatch: PropTypes.func,\r\n    singleView: PropTypes.bool\r\n};\r\n\r\nexport default connect(mapStateToProps)(Photos);\r\n\r\n","import React, {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Icon, Switch } from \"@blueprintjs/core\";\r\nimport { IconNames } from \"@blueprintjs/icons\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport {setShowFavoriteDogs} from \"../../../redux/actions/dogs\";\r\nimport {setFirstSearch, setSingleView, setError} from \"../../../redux/actions/app\";\r\nimport {connect} from \"react-redux\";\r\nimport {throttle} from \"lodash\";\r\nimport {setDarkTheme} from \"../../../redux/actions/app\";\r\nimport './menu.scss';\r\n\r\n/**\r\n * @param dispatch - used to dispatch actions to redux store\r\n * @param darkTheme - whether the current theme is dark\r\n * @param singleView - whether the current app state is in single view\r\n * @param showingFavoriteDogs - whether the app is currently showing favorite dogs\r\n * @desc The menu component opens and close a menu for the entire app.\r\n *\r\n * Features:\r\n *  - backdrop filter if vertical scroll position greater than zero\r\n *  - open & close dialog animation\r\n *  - slider for switching theme\r\n *  - button for showing favorite dogs\r\n */\r\nfunction Menu ({dispatch, darkTheme, singleView, showingFavoriteDogs}) {\r\n\r\n    // COMPONENT STATE -------------------------------------------------------------------------------------------------\r\n\r\n    const [menuOpen, setMenuOpen] = useState(false);\r\n    const [scrollY, setScrollY] = useState(0);\r\n\r\n    // SIDE EFFECTS ----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @desc Registers an event listener on the window's\r\n     * vertical scroll position.\r\n     */\r\n    useEffect(() => {\r\n        const updateScroll = throttle(() => {\r\n            setScrollY(window.scrollY);\r\n        }, 100);\r\n        window.addEventListener(\"scroll\", updateScroll);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", updateScroll);\r\n        };\r\n    }, []);\r\n\r\n    // HANDLERS --------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @desc A change handler for the\r\n     * favorite slider.\r\n     */\r\n    const handleOnChange = () => {\r\n        try {\r\n            dispatch(setFirstSearch(false));\r\n            dispatch(setShowFavoriteDogs(!showingFavoriteDogs));\r\n            setMenuOpen(false);\r\n        } catch (err) {\r\n            dispatch(setError(err));\r\n        }\r\n    };\r\n\r\n    // COMPONENTS ------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @desc A dialog background.\r\n     */\r\n    const renderBackground = () => {\r\n        if (menuOpen) {\r\n            return (\r\n                <div className={\"dialog-background\"} onClick={() => setMenuOpen(false)}/>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    const renderBackButton = () => {\r\n      if (singleView) {\r\n          return (\r\n              <span className={`back-icon`} onClick={() => dispatch(setSingleView(false))}>\r\n                   <Icon icon={IconNames.CHEVRON_LEFT}/>\r\n              </span>\r\n          );\r\n      }\r\n      return null;\r\n    };\r\n\r\n    let menuClass = \"menu\";\r\n    if (scrollY > 0) menuClass += \" active\";\r\n    if (singleView) menuClass += \" single-view\";\r\n\r\n    return (\r\n        <>\r\n            <div className={menuClass}>\r\n                {renderBackButton()}\r\n                <span className={`menu-icon`} onClick={() => setMenuOpen(!menuOpen)}>\r\n                   <Icon icon={IconNames.MENU}/>\r\n                </span>\r\n            </div>\r\n            {renderBackground()}\r\n            <CSSTransition in={menuOpen} unmountOnExit mountOnEnter classNames=\"dialog\" timeout={250}>\r\n                <nav>\r\n                    <ul>\r\n                        <li className={showingFavoriteDogs ? \"favorited\" : \"\"}>\r\n                            <Icon icon={IconNames.STAR}/>\r\n                            <Switch checked={showingFavoriteDogs} onChange={handleOnChange  }/>\r\n                        </li>\r\n                        <li>\r\n                            <Icon icon={IconNames.MOON}/>\r\n                            <Switch checked={darkTheme} onChange={() => dispatch(setDarkTheme(!darkTheme))}/>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n            </CSSTransition>\r\n        </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    darkTheme: state.app.darkTheme,\r\n    showingFavoriteDogs: state.dogs.showingFavoriteDogs,\r\n    singleView: state.app.singleView\r\n});\r\n\r\nMenu.propTypes = {\r\n    dispatch: PropTypes.func,\r\n    darkTheme: PropTypes.bool,\r\n    showFavoriteDogs: PropTypes.bool,\r\n    singleView: PropTypes.bool\r\n};\r\n\r\nexport default connect(mapStateToProps)(Menu);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {setError} from \"../../../redux/actions/app\";\r\nimport { Icon, Intent} from \"@blueprintjs/core\";\r\nimport { IconNames } from \"@blueprintjs/icons\";\r\nimport './error-boundary.scss';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.props.dispatch(setError({error,errorInfo}));\r\n    }\r\n\r\n    render() {\r\n        if (this.props.hasError) {\r\n            return (\r\n                <main className={\"error-boundary\"}>\r\n                    <div className={\"message\"}>\r\n                        <Icon icon={IconNames.ERROR} intent={Intent.DANGER}/>\r\n                        <h1>Sorry, something went wrong.</h1>\r\n                        <h2>Please try again later.</h2>\r\n                    </div>\r\n                </main>\r\n            );\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nErrorBoundary.propTypes = {\r\n    dispatch: PropTypes.func,\r\n    hasError: PropTypes.bool\r\n};\r\nexport default ErrorBoundary;","import React, {useState, useEffect, useRef} from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport {Icon} from \"@blueprintjs/core\";\r\nimport { IconNames } from \"@blueprintjs/icons\";\r\nimport {setError} from \"../../../redux/actions/app\";\r\nimport {mod, prettifyBreed, breedToKey, keyToBreed , memoizeFilterList} from \"../../../util/util\";\r\nimport './search.scss';\r\n\r\n/**\r\n * @param items {[]} - the items to make searchable and selectable\r\n * @param handleValueChange {function} - a handler to call on the selected item\r\n * @param handleOnFocus {function} - a handler to call on search focus\r\n * @param firstSearch {boolean} - whether the first search is completed\r\n * @param dispatch {function}\r\n * @desc A search bar component for selecting a type of breed.\r\n *\r\n * Features:\r\n *  - displays an option dialog on input focus\r\n *  - allow dialog search on Arrow keys (up & down)\r\n *  - allow option selection on click and Enter key\r\n */\r\nfunction Search({items, handleValueChange, handleOnFocus, firstSearch, dispatch}) {\r\n\r\n    // CONSTANTS -------------------------------------------------------------------------------------------------------\r\n\r\n    const INITIAL_PLACEHOLDER = \"Search dog breed\";\r\n    const KEY_CODE = Object.freeze({\r\n        UP: 38,\r\n        DOWN: 40,\r\n        ENTER: 13\r\n    });\r\n\r\n    // COMPONENT STATE -------------------------------------------------------------------------------------------------\r\n\r\n    const [inputVal, setInputVal] = useState('');\r\n    const [showOptions, setShowOptions] = useState(false);\r\n    const [filteredItems, setFilteredItems] = useState([]);\r\n    const [selectedIndex, setSelectedIndex] = useState(0);\r\n    const [placeholder, setPlaceholder] = useState(INITIAL_PLACEHOLDER);\r\n\r\n    // ELEMENT REFS ----------------------------------------------------------------------------------------------------\r\n\r\n    const searchContainerRef = useRef(null);\r\n    const currOptionRef = useRef(null);\r\n\r\n    // SIDE EFFECTS ----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @desc Whenever the current option changes,\r\n     * scroll it into view if needed.\r\n     */\r\n    useEffect(() => {\r\n        try {\r\n            const {current} = currOptionRef;\r\n            if (current) current.scrollIntoViewIfNeeded(false);\r\n        } catch (err) {\r\n            dispatch(setError(err));\r\n        }\r\n    }, [selectedIndex]);\r\n\r\n    /**\r\n     * @desc Registers an event listener for detecting\r\n     * clicks outside of the search container. Close the\r\n     * option dialog on outside click.\r\n     */\r\n    useEffect(() => {\r\n        const handleClick = e => {\r\n            if (!searchContainerRef.current.contains(e.target)) {\r\n                setShowOptions(false);\r\n            }\r\n        };\r\n        document.addEventListener(\"mousedown\", handleClick);\r\n\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClick);\r\n        };\r\n    }, []);\r\n\r\n    /**\r\n     * @desc Whenever items changes, make sure to update the\r\n     * filtered list of items.\r\n     */\r\n    useEffect(() => {\r\n        try {\r\n            setFilteredItems(items)\r\n        } catch (err) {\r\n            dispatch(setError(err));\r\n        }\r\n    }, [items]);\r\n\r\n    /**\r\n     * @desc Whenever the input value changes, update the\r\n     * filtered list of items.\r\n     */\r\n    useEffect(() => {\r\n        const filteredItems = memoizeFilterList(items,inputVal);\r\n        setFilteredItems(filteredItems);\r\n    }, [inputVal]);\r\n\r\n    /**\r\n     * @desc If the component state is currently NOT showing the\r\n     * option dialog, then reset the placeholder.\r\n     */\r\n    useEffect(() => {\r\n        if (!showOptions) setPlaceholder(INITIAL_PLACEHOLDER);\r\n    }, [showOptions]);\r\n\r\n    // HANDLERS --------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @param e\r\n     * @desc A change handler for updating\r\n     * the appropriate states on input change.\r\n     */\r\n    const handleOnChange = e => {\r\n        try {\r\n            setInputVal(e.target.value);\r\n            setShowOptions(true);\r\n            if (!e.target.value && filteredItems.length) setPlaceholder(prettifyBreed(filteredItems[0]));\r\n        } catch (err) {\r\n            dispatch(setError(err));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param key - the string representation of a breed as a key\r\n     * @desc A handler for selecting an option. Updates the input,\r\n     * closes the option dialog, and calls the parent handler.\r\n     */\r\n    const optionSelect = key => {\r\n        try {\r\n            const breed = keyToBreed(key);\r\n            setInputVal(prettifyBreed(breed));\r\n            setShowOptions(false);\r\n            handleValueChange(breed);\r\n            setSelectedIndex(0); // reset\r\n        } catch (err) {\r\n            dispatch(setError(err));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param e\r\n     * @desc A keyup handler. Deals with updating\r\n     * the input placeholder and selecting an option.\r\n     */\r\n    const handleOnKeyUp = e => {\r\n        try {\r\n            const {length} = filteredItems;\r\n            let newIndex;\r\n            switch(e.keyCode) {\r\n                case KEY_CODE.DOWN:\r\n                    newIndex = mod(selectedIndex + 1, length);\r\n                    setSelectedIndex(newIndex);\r\n                    setPlaceholder(prettifyBreed(filteredItems[newIndex]));\r\n                    break;\r\n                case KEY_CODE.UP:\r\n                    newIndex = mod(selectedIndex - 1, length);\r\n                    setSelectedIndex(newIndex);\r\n                    setPlaceholder(prettifyBreed(filteredItems[newIndex]));\r\n                    break;\r\n                case KEY_CODE.ENTER:\r\n                    optionSelect(breedToKey(filteredItems[selectedIndex]));\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        } catch (err) {\r\n            dispatch(setError(err));\r\n        }\r\n    };\r\n\r\n    // COMPONENTS ------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @desc Renders an options dialog.\r\n     */\r\n    const renderOptions = () => {\r\n        if (showOptions && filteredItems.length) {\r\n            const options = filteredItems.map((breed,i) => {\r\n                const val = breedToKey(breed);\r\n                const label = prettifyBreed(breed);\r\n                const props = {\r\n                    className: \"option\",\r\n                    key: val,\r\n                    'data-value': val\r\n                };\r\n                if (i === selectedIndex) { // special style and ref for current selected option\r\n                    props.className += \" selected\";\r\n                    props.ref = currOptionRef;\r\n                }\r\n                return (<div {...props} onClick={e => optionSelect(e.target.dataset.value)}>{label}</div>);\r\n            });\r\n            return (\r\n                <div className={\"options-container\"}>\r\n                    <div className=\"options\">\r\n                        {options}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={\"search-container\"}\r\n            style={{'width': (firstSearch ? '50%' : \"80%\")}}\r\n            ref={searchContainerRef}>\r\n            <Icon icon={IconNames.SEARCH}/>\r\n            <input\r\n                type=\"text\"\r\n                className={(showOptions ? \"focus\" : \"\") + (showOptions && filteredItems.length ? \" dropdown\" : \"\")}\r\n                value={inputVal}\r\n                spellCheck={false}\r\n                onKeyUp={handleOnKeyUp}\r\n                onChange={handleOnChange}\r\n                placeholder={placeholder}\r\n                onFocus={handleOnFocus}/>\r\n            {renderOptions()}\r\n        </div>\r\n    );\r\n}\r\n\r\nSearch.propTypes = {\r\n    items: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\r\n    handleValueChange: PropTypes.func,\r\n    firstSearch: PropTypes.bool,\r\n    dispatch: PropTypes.func\r\n};\r\n\r\nexport default Search;\r\n","import {fetchBreeds} from \"../../api\";\r\nimport {FETCH_BREEDS} from \"./actionTypes\";\r\n\r\nfunction initialAction() {\r\n    return {\r\n        type: FETCH_BREEDS.INITIAL\r\n    }\r\n}\r\n\r\nfunction successAction(res) {\r\n    return {\r\n        type: FETCH_BREEDS.SUCCESS,\r\n        breeds: res.message\r\n    }\r\n}\r\n\r\nfunction failureAction(err) {\r\n    return {\r\n        type: FETCH_BREEDS.FAILURE,\r\n        err\r\n    }\r\n}\r\n\r\nexport default () => {\r\n    return async (dispatch) => {\r\n        dispatch(initialAction());\r\n        try {\r\n            const res = await fetchBreeds();\r\n            if (res.status === \"success\") {\r\n                dispatch(successAction(res));\r\n            } else {\r\n                dispatch(failureAction(res));\r\n            }\r\n        } catch (e) {\r\n            dispatch(failureAction(e))\r\n        }\r\n    };\r\n}","import React, {useEffect, useState, useMemo} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport Photos from \"../photos/photos\";\nimport Menu from \"../menu/menu\";\nimport ErrorBoundary from \"../../non-connected/error-boundary/error-boundary\";\nimport Search from '../../non-connected/search/search';\nimport {getDogs, setCurrentBreed, getRandomDogs} from '../../../redux/actions/dogs';\nimport fetchBreeds from '../../../redux/actions/breeds';\nimport {setFirstSearch, setError} from \"../../../redux/actions/app\";\nimport {breedToKey} from \"../../../util/util\";\nimport {Icon} from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport './App.scss';\n\n/**\n * @param appState\n * @param dogState\n * @param breeds\n * @param dispatch - provided by connect, used to dispatch actions\n * @desc App is a top level connected component.\n *\n * Main Responsibilities:\n *  - fetching breeds data from Dogs API\n *  - updating theme\n *  - displaying a memoized photos component\n */\nfunction App({appState, dogState, breeds, dispatch}) {\n\n    // CONSTANTS -------------------------------------------------------------------------------------------------------\n\n    const {firstSearch, darkTheme, singleView, hasError} = appState;\n    const {dogs, currentBreed, showingFavoriteDogs, currentDogs} = dogState;\n\n    // SIDE EFFECTS ----------------------------------------------------------------------------------------------------\n\n    /**\n     * @desc Fetch all of the possible breeds\n     * and subBreeds only once.\n     */\n    useEffect(() => {\n        try {\n            dispatch(fetchBreeds());\n        } catch (err) {\n            dispatch(setError(err));\n        }\n    }, []);\n\n    /**\n     * @desc Whenever the theme changes,\n     * update the html class accordingly.\n     */\n    useEffect(() => {\n        if (darkTheme) {\n            document.querySelector(\"html\").className = \"dark\";\n            return;\n        }\n        document.querySelector(\"html\").className = \"light\";\n    }, [darkTheme]);\n\n    /**\n     * @desc Whenever the single view state changes,\n     * update the card length CSS variable.\n     */\n    useEffect(() => {\n        if (singleView) {\n            document.querySelector(\"html\").style.setProperty(\"--card-length\", \"90vw\");\n            return;\n        }\n        document.querySelector(\"html\").style.setProperty(\"--card-length\", \"32vw\");\n    }, [singleView]);\n\n    // HANDLERS --------------------------------------------------------------------------------------------------------\n\n    /**\n     * @param breed\n     * @param subBreed\n     * @desc A handler for dispatching actions to the\n     * app and dog state according to the value selected\n     * from the search component.\n     */\n    const handleValueChange = async ({breed,subBreed}) => {\n        try {\n            const key = breedToKey({breed,subBreed});\n            if (!(key in dogs)) {\n                await dispatch(getDogs(breed, subBreed));\n            }\n            await dispatch(setCurrentBreed(key));\n            dispatch(getRandomDogs());\n        } catch (err) {\n            dispatch(setError(err));\n        }\n    };\n\n    /**\n     * @desc A focus handler for setting\n     * first search to false.\n     */\n    const handleOnFocus = () => {\n        try {\n            dispatch(setFirstSearch(false));\n        } catch (err) {\n            dispatch(setError(err));\n        }\n    };\n\n    // COMPONENTS ------------------------------------------------------------------------------------------------------\n\n    /**\n     * @desc Memoize the return value to control\n     * when the photos component re-renders.\n     */\n    const dogPhotos = useMemo(() => {\n        if (currentBreed && dogs[currentBreed] && dogs[currentBreed].size) {\n            return (<Photos/>);\n        }\n        return null;\n    }, [dogs, currentBreed]);\n\n    /**\n     * @desc A small component to show when\n     * the user has selected \"favorites\" and\n     * there are currently no favorite dogs\n     * in the app state.\n     */\n    const noFavorites = (\n      <div className={\"no-favorites\"}>\n          <div>Click on the \"</div>\n          <Icon icon={IconNames.STAR_EMPTY}/>\n          <div>\" icon to favorite a photo.</div>\n      </div>\n    );\n\n    const searchProps = {\n        items: breeds,\n        handleValueChange,\n        handleOnFocus,\n        firstSearch,\n        dispatch\n    };\n\n    return (\n        <ErrorBoundary dispatch={dispatch} hasError={hasError}>\n            <main className={singleView ? \"singleView\" : \"\"}>\n                <div className={`query-container ${firstSearch ? \"first-search\" : \"\"}`}>\n                    <Search {...searchProps}/>\n                </div>\n                {(showingFavoriteDogs && !currentDogs.length) ? noFavorites : dogPhotos}\n            </main>\n            <Menu/>\n        </ErrorBoundary>\n    );\n}\n\nApp.propTypes = {\n    appState: PropTypes.object,\n    dogState: PropTypes.object,\n    breeds: PropTypes.array,\n    dispatch: PropTypes.func\n};\n\nconst mapStateToProps = (state) => ({\n    dogState: state.dogs,\n    breeds: state.breeds.breeds,\n    appState: state.app\n});\n\nexport default connect(mapStateToProps)(App);\n","import {FETCH_DOGS, DOGS} from \"../actions/actionTypes\";\r\nimport {updateDogs, randomDogs} from \"../../util/util\";\r\n\r\nconst INITIAL_STATE = {\r\n    inProgress: false,\r\n    dogs: {},\r\n    pageSize: 9,\r\n    currentBreed: null,\r\n    currentDogs: [],\r\n    favoriteDogs: [],\r\n    showingFavoriteDogs: false,\r\n    err: null\r\n};\r\n\r\nexport default (prevState = INITIAL_STATE, action) => {\r\n    let {dogs, pageSize, currentBreed, currentDogs, favoriteDogs} = prevState;\r\n    switch(action.type) {\r\n        case FETCH_DOGS.INITIAL:\r\n            return {\r\n                ...prevState,\r\n                inProgress: true,\r\n                err: null\r\n            };\r\n        case FETCH_DOGS.SUCCESS:\r\n            dogs = updateDogs(prevState.dogs, action);\r\n            return {\r\n                ...prevState,\r\n                inProgress: false,\r\n                dogs,\r\n                err: null\r\n            };\r\n        case FETCH_DOGS.FAILURE:\r\n            return {\r\n                ...prevState,\r\n                inProgress: false,\r\n                err: action.err\r\n            };\r\n        case DOGS.SET_CURRENT_BREED:\r\n            return  {\r\n                ...prevState,\r\n                currentBreed: action.currentBreed,\r\n                showingFavoriteDogs: false, // reset\r\n                currentDogs: [] // reset\r\n            };\r\n        case DOGS.GET_RANDOM_DOGS:\r\n            currentDogs = randomDogs(pageSize, Array.from(dogs[currentBreed]), currentDogs);\r\n            return {\r\n                ...prevState,\r\n                currentDogs\r\n            };\r\n        case DOGS.APPEND_CURRENT_DOGS:\r\n            return {\r\n                ...prevState,\r\n                currentDogs: [...currentDogs, ...action.currentDogs]\r\n            };\r\n        case DOGS.ADD_FAVORITE:\r\n            return {\r\n                ...prevState,\r\n                favoriteDogs: [...favoriteDogs, action.dog]\r\n            };\r\n        case DOGS.REMOVE_FAVORITE:\r\n            const newFavoriteDogs = [...favoriteDogs];\r\n            const index = newFavoriteDogs.findIndex(val => val === action.dog);\r\n            if (index > -1) {\r\n                newFavoriteDogs.splice(index,1);\r\n            }\r\n            return {\r\n                ...prevState,\r\n                favoriteDogs: newFavoriteDogs\r\n            };\r\n        case DOGS.SET_SHOW_FAVORITES:\r\n            if (action.showFavoriteDogs) {\r\n                return {\r\n                    ...prevState,\r\n                    showingFavoriteDogs: true,\r\n                    currentDogs: favoriteDogs.slice(0,pageSize)\r\n                };\r\n            }\r\n            currentDogs = [];\r\n            if (currentBreed && dogs[currentBreed]) {\r\n                currentDogs = Array.from(dogs[currentBreed]).slice(0,pageSize);\r\n            }\r\n            return {\r\n                ...prevState,\r\n                showingFavoriteDogs: false,\r\n                currentDogs\r\n            };\r\n        default:\r\n            return prevState;\r\n    }\r\n}","import {FETCH_BREEDS} from \"../actions/actionTypes\";\r\n\r\nconst INITIAL_STATE = {\r\n    inProgress: false,\r\n    breeds: [],\r\n    err: null\r\n};\r\n\r\n/**\r\n * @param breeds\r\n * @returns {[]}\r\n * @desc Formats the object from the Dogs Breeds endpoint\r\n * to an array of breeds and sub-breeds.\r\n * Object to format: https://dog.ceo/api/breeds/list/all\r\n */\r\nfunction formatBreeds(breeds) {\r\n    const result = [];\r\n    Object.entries(breeds).forEach(([breed,subBreeds]) => {\r\n        if (subBreeds.length) {\r\n            subBreeds.forEach(subBreed => result.push({breed, subBreed}));\r\n        } else {\r\n            result.push({breed, subBreed: null});\r\n        }\r\n    });\r\n    return result;\r\n}\r\n\r\nexport default (prevState = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case FETCH_BREEDS.INITIAL:\r\n            return {\r\n                ...prevState,\r\n                inProgress: true,\r\n                breeds: [],\r\n                err: null\r\n            };\r\n        case FETCH_BREEDS.SUCCESS:\r\n            const breeds = formatBreeds(action.breeds);\r\n            return {\r\n                ...prevState,\r\n                inProgress: false,\r\n                breeds,\r\n                err: null\r\n            };\r\n        case FETCH_BREEDS.FAILURE:\r\n            return {\r\n                ...prevState,\r\n                inProgress: false,\r\n                breeds: [],\r\n                err: action.err\r\n            };\r\n        default:\r\n            return prevState;\r\n    }\r\n}","import {APP} from \"../actions/actionTypes\";\r\n\r\nconst INITIAL_STATE = {\r\n    firstSearch: true,\r\n    darkTheme: true,\r\n    singleView: false,\r\n    hasError: false,\r\n    error: null\r\n};\r\n\r\nexport default (prevState = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case APP.SET_FIRST_SEARCH:\r\n            return {\r\n                ...prevState,\r\n                firstSearch: action.firstSearch\r\n            };\r\n        case APP.SET_DARK_THEME:\r\n            return {\r\n                ...prevState,\r\n                darkTheme: action.darkTheme\r\n            };\r\n        case APP.SET_SINGLE_VIEW:\r\n            return {\r\n                ...prevState,\r\n                singleView: action.singleView\r\n            };\r\n        case APP.SET_ERROR:\r\n            return {\r\n                ...prevState,\r\n                hasError: true,\r\n                error: action.error\r\n            };\r\n        default:\r\n            return prevState;\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport dogs from \"./dogs\";\r\nimport breeds from \"./breeds\";\r\nimport app from \"./app\";\r\n\r\nexport default combineReducers({dogs, breeds, app});","import {createStore, applyMiddleware} from 'redux';\r\nimport logger from 'redux-logger';\r\nimport finalReducer from './reducers/index';\r\nimport thunk from \"redux-thunk\";\r\n\r\n// todo: remove logger in production env\r\nconst middleware = applyMiddleware(logger, thunk);\r\n\r\nexport default createStore(finalReducer, middleware);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider} from 'react-redux';\nimport App from './components/connected/app/App';\nimport store from './redux/store';\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n"],"sourceRoot":""}