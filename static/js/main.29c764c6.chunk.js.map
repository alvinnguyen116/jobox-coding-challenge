{"version":3,"sources":["redux/actions/actionTypes.js","redux/actions/app.js","api.js","redux/actions/dogs.js","components/non-connected/photo/photo.js","components/non-connected/infinite-scroll/infinite-scroll.js","util/util.js","components/connected/photos/photos.js","components/connected/menu/menu.js","components/non-connected/error-boundary/error-boundary.js","components/non-connected/search/search.js","redux/actions/breeds.js","components/connected/app/App.js","redux/reducers/dogs.js","redux/reducers/breeds.js","redux/reducers/app.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["FETCH_DOGS","Object","freeze","INITIAL","SUCCESS","FAILURE","FETCH_BREEDS","DOGS","SET_CURRENT_BREED","GET_RANDOM_DOGS","ADD_FAVORITE","REMOVE_FAVORITE","SHOW_FAVORITES","APPEND_CURRENT_DOGS","APP","SET_FIRST_SEARCH","SET_DARK_THEME","SHOW_TOAST","SET_ERROR","setFirstSearch","firstSearch","type","setShowToast","showToast","getJSON","url","a","fetch","res","json","fetchDogs","breed","subBreed","initialAction","successAction","dogs","message","failureAction","err","setCurrentBreed","currentBreed","getRandomDogs","getDogs","dispatch","status","Photo","isLoaded","isFavorite","BUTTON_OPTION","FAVORITE","COPY","handleOnClick","e","dog","currentTarget","dataset","buttonOption","navigator","clipboard","writeText","addFavorite","className","key","style","backgroundImage","onClick","data-button-option","icon","IconNames","STAR","InfiniteScroll","children","handleLastRow","useInView","lastRowRef","lastRowInView","onLastRow","debounce","useEffect","ref","mod","num","n","capitalize","str","slice","toUpperCase","toLowerCase","prettifyBreed","trim","promisifyImage","src","Promise","resolve","img","Image","addEventListener","setAttribute","randomDogs","prev","diff","difference","result","length","randIndex","random","randValue","splice","push","breedToKey","JSON","stringify","updateDogs","prevDogs","newDogs","cloneDeep","Set","connect","state","dogState","currentDogs","favoriteDogs","showingFavoriteDogs","pageSize","max","size","useState","loadedPhotos","setLoadedPhotos","isMounted","notLoadedPhotos","filter","includes","photos","promises","map","allSettled","promisifyPhotos","then","rows","props","appendCurrentDogs","darkTheme","app","menuOpen","setMenuOpen","scrollY","setScrollY","updateScroll","throttle","window","removeEventListener","MENU","CSSTransition","in","unmountOnExit","mountOnEnter","classNames","timeout","scroll","top","left","behavior","MOON","checked","onChange","setDarkTheme","ErrorBoundary","hasError","error","errorInfo","this","setError","ERROR","intent","Intent","DANGER","React","Component","Search","items","handleValueChange","handleOnFocus","KEY_CODE","UP","DOWN","ENTER","inputVal","setInputVal","showOptions","setShowOptions","filteredItems","setFilteredItems","selectedIndex","setSelectedIndex","placeholder","setPlaceholder","searchContainerRef","useRef","currOptionRef","current","scrollIntoViewIfNeeded","handleClick","contains","target","document","cache","optionSelect","parse","keyToBreed","console","log","SEARCH","value","spellCheck","onKeyUp","newIndex","keyCode","onFocus","options","i","val","label","renderOptions","breeds","appState","querySelector","dogPhotos","useMemo","noFavorites","STAR_EMPTY","searchProps","position","Position","TOP","CLIPBOARD","onDismiss","INITIAL_STATE","inProgress","formatBreeds","entries","forEach","subBreeds","combineReducers","prevState","action","Array","from","newFavoriteDogs","index","findIndex","middleware","applyMiddleware","logger","thunk","createStore","finalReducer","ReactDOM","render","store","getElementById"],"mappings":"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","file":"static/js/main.29c764c6.chunk.js","sourcesContent":["export const FETCH_DOGS = Object.freeze({\r\n    INITIAL: \"FETCH_DOGS_INITIAL\",\r\n    SUCCESS: \"FETCH_DOGS_SUCCESS\",\r\n    FAILURE: \"FETCH_DOGS_FAILURE\"\r\n});\r\n\r\nexport const FETCH_BREEDS = Object.freeze({\r\n    INITIAL: \"FETCH_BREEDS_INITIAL\",\r\n    SUCCESS: \"FETCH_BREEDS_SUCCESS\",\r\n    FAILURE: \"FETCH_BREEDS_FAILURE\"\r\n});\r\n\r\nexport const DOGS = Object.freeze({\r\n    SET_CURRENT_BREED: \"DOGS_SET_CURRENT_BREED\",\r\n    GET_RANDOM_DOGS: \"DOGS_GET_RANDOM_DOGS\",\r\n    ADD_FAVORITE: \"DOGS_ADD_FAVORITE\",\r\n    REMOVE_FAVORITE: \"DOGS_REMOVE_FAVORITE\",\r\n    SHOW_FAVORITES: \"DOGS_SHOW_FAVORITES\",\r\n    APPEND_CURRENT_DOGS: \"DOGS_APPEND_CURRENT_DOGS\"\r\n});\r\n\r\nexport const APP = Object.freeze({\r\n    SET_FIRST_SEARCH: \"APP_SET_FIRST_SEARCH\",\r\n    SET_DARK_THEME: \"APP_SET_DARK_THEME\",\r\n    SHOW_TOAST: \"APP_SHOW_TOAST\",\r\n    SET_ERROR: \"APP_SET_ERROR\"\r\n});","import {APP} from \"./actionTypes\";\r\n\r\nexport function setFirstSearch(firstSearch) {\r\n    return {\r\n        type: APP.SET_FIRST_SEARCH,\r\n        firstSearch\r\n    };\r\n}\r\n\r\nexport function setDarkTheme(darkTheme) {\r\n    return {\r\n        type: APP.SET_DARK_THEME,\r\n        darkTheme\r\n    };\r\n}\r\n\r\nexport function setError(error) {\r\n    return {\r\n        type: APP.SET_ERROR,\r\n        error\r\n    }\r\n}\r\n\r\nexport function setShowToast(showToast) {\r\n    return {\r\n        type: APP.SHOW_TOAST,\r\n        showToast\r\n    };\r\n}","/**\r\n * @param url - the url to fetch\r\n * @returns {Promise<any>}\r\n * @desc A utility function for fetching the JSON\r\n * response from an endpoint.\r\n */\r\nasync function getJSON(url) {\r\n    try {\r\n        const res = await fetch(url);\r\n        return await res.json();\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}\r\n\r\n/**\r\n * @param breed\r\n * @param subBreed\r\n * @returns {Promise<any>}\r\n * @desc Makes a request to the Dogs API by breed and sub-breed.\r\n * Dogs API: https://dog.ceo/dog-api/documentation/\r\n */\r\nexport function fetchDogs(breed, subBreed = null) {\r\n    let url = `https://dog.ceo/api/breed/${breed}/`;\r\n    if (subBreed) url += `${subBreed}/`;\r\n    url += \"images\";\r\n    return getJSON(url);\r\n}\r\n\r\n/**\r\n * @returns {Promise<any>}\r\n * @desc Makes a request to the Dogs API for the list of breeds.\r\n */\r\nexport function fetchBreeds() {\r\n    const url = \"https://dog.ceo/api/breeds/list/all\";\r\n    return getJSON(url);\r\n}","import {fetchDogs} from \"../../api\";\r\nimport {DOGS, FETCH_DOGS} from \"./actionTypes\";\r\n\r\nfunction initialAction() {\r\n    return {\r\n        type: FETCH_DOGS.INITIAL\r\n    }\r\n}\r\n\r\nfunction successAction({breed,subBreed,res}) {\r\n    return {\r\n        type: FETCH_DOGS.SUCCESS,\r\n        breed,\r\n        subBreed,\r\n        dogs: res.message\r\n    }\r\n}\r\n\r\nfunction failureAction(err) {\r\n    return {\r\n        type: FETCH_DOGS.FAILURE,\r\n        err\r\n    }\r\n}\r\n\r\nexport function setCurrentBreed(currentBreed) {\r\n    return {\r\n        type: DOGS.SET_CURRENT_BREED,\r\n        currentBreed\r\n    };\r\n}\r\n\r\nexport function getRandomDogs() {\r\n    return {\r\n        type: DOGS.GET_RANDOM_DOGS\r\n    };\r\n}\r\n\r\nexport function removeFavorite(dog) {\r\n    return {\r\n        type: DOGS.REMOVE_FAVORITE,\r\n        dog\r\n    };\r\n}\r\n\r\nexport function addFavorite(dog) {\r\n    return {\r\n        type: DOGS.ADD_FAVORITE,\r\n        dog\r\n    };\r\n}\r\n\r\nexport function showFavoriteDogs() {\r\n    return {\r\n        type: DOGS.SHOW_FAVORITES\r\n    };\r\n}\r\n\r\nexport function appendCurrentDogs(currentDogs) {\r\n    return {\r\n        type: DOGS.APPEND_CURRENT_DOGS,\r\n        currentDogs\r\n    }\r\n}\r\n\r\nexport function getDogs(breed, subBreed=null) {\r\n    return async (dispatch) => {\r\n        dispatch(initialAction());\r\n        try {\r\n            const res = await fetchDogs(breed,subBreed);\r\n            if (res.status === \"success\") {\r\n                dispatch(successAction({breed,subBreed,res}));\r\n            } else {\r\n                dispatch(failureAction(res));\r\n            }\r\n        } catch (e) {\r\n            dispatch(failureAction(e))\r\n        }\r\n    };\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {setShowToast} from \"../../../redux/actions/app\";\r\nimport {addFavorite, removeFavorite} from \"../../../redux/actions/dogs\";\r\nimport {Icon} from \"@blueprintjs/core\";\r\nimport {IconNames} from \"@blueprintjs/icons\";\r\nimport './photo.scss';\r\n\r\n/**\r\n * @param url - the image to display\r\n * @param isLoaded - whether the image has finished loading\r\n * @param isFavorite - whether the image is currently a favorite image\r\n * @param dispatch\r\n * @desc A photo component\r\n */\r\nfunction Photo({url, isLoaded, isFavorite, dispatch}) {\r\n\r\n    // CONSTANTS -------------------------------------------------------------------------------------------------------\r\n\r\n    const BUTTON_OPTION = Object.freeze({\r\n        FAVORITE: \"FAVORITE\",\r\n        COPY: \"COPY\"\r\n    });\r\n\r\n    // HANDLERS --------------------------------------------------------------------------------------------------------\r\n    /**\r\n     * @param e\r\n     * @desc A click handler for triggering\r\n     * link copying and favoriting or unfavoriting\r\n     * a photo.\r\n     */\r\n    const handleOnClick = e => {\r\n        const {buttonOption} = e.currentTarget.dataset;\r\n        switch (buttonOption) {\r\n            case BUTTON_OPTION.COPY:\r\n                navigator.clipboard.writeText(url);\r\n                dispatch(setShowToast(true));\r\n                break;\r\n            case BUTTON_OPTION.FAVORITE:\r\n                if (isFavorite) {\r\n                    dispatch(removeFavorite(url));\r\n                } else {\r\n                    dispatch(addFavorite(url));\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    // COMPONENTS ------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @desc Until the photo finished loading, render a default background.\r\n     */\r\n    if (isLoaded) {\r\n        return  (\r\n            <div className={\"photo\"} key={url}>\r\n                <div\r\n                    className={\"card-container\"}\r\n                    style={{backgroundImage: `url(${url})`}}\r\n                    onClick={handleOnClick}\r\n                    data-button-option={BUTTON_OPTION.COPY}/>\r\n                <div className={\"buttons\"}>\r\n                    <span data-button-option={BUTTON_OPTION.FAVORITE} onClick={handleOnClick}>\r\n                       <Icon className={isFavorite ? \"favorite\" : \"\"} icon={IconNames.STAR}/>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={\"photo inactive\"}>\r\n            <div className={\"card-container\"}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nPhoto.propTypes = {\r\n    url: PropTypes.string,\r\n    isLoaded: PropTypes.bool,\r\n    isFavorite: PropTypes.bool,\r\n    dispatch: PropTypes.func\r\n};\r\n\r\nexport default Photo;","import React, {useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {useInView} from 'react-intersection-observer';\r\nimport {debounce} from \"lodash\";\r\n\r\n/**\r\n * @param children\r\n * @param handleLastRow {function} - handler to call on last row\r\n * @param className {string?}\r\n * @desc An infinite scrolling wrapper component.\r\n */\r\nfunction InfiniteScroll({children, handleLastRow, className = ''}) {\r\n\r\n    // CONSTANTS -------------------------------------------------------------------------------------------------------\r\n\r\n    const [lastRowRef, lastRowInView] = useInView();\r\n    const onLastRow = debounce(handleLastRow, 250);\r\n\r\n    // SIDE EFFECTS ----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @desc Whenever the last row is in view,\r\n     * call the debounced last row handler.\r\n     */\r\n    useEffect(() => {\r\n        if (lastRowInView) {\r\n            onLastRow();\r\n        }\r\n    }, [lastRowInView]);\r\n\r\n    // COMPONENTS ------------------------------------------------------------------------------------------------------\r\n\r\n    return (\r\n        <div className={className}>\r\n            {children}\r\n            <div ref={lastRowRef}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nInfiniteScroll.propTypes = {\r\n    handleLastRow: PropTypes.func,\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default InfiniteScroll;","import {cloneDeep, random, difference} from \"lodash\";\r\n\r\n/**\r\n * @param num\r\n * @param n\r\n * @returns {number}\r\n * @desc Javascript's native modulo does\r\n * not work as expected for negative numbers.\r\n * This is a work-around.\r\n */\r\nexport function mod(num,n) {\r\n    return ((num % n) + n) % n;\r\n}\r\n\r\n/**\r\n * @param str\r\n * @returns {string}\r\n * @desc Capitalize a single word.\r\n */\r\nfunction capitalize(str) {\r\n    return str.slice(0,1).toUpperCase() + str.slice(1).toLowerCase();\r\n}\r\n\r\n/**\r\n * @param breed\r\n * @param subBreed\r\n * @returns {string}\r\n * @desc Prettify a breed for display.\r\n */\r\nexport function prettifyBreed({breed, subBreed = null}) {\r\n    return `${capitalize(breed)} ${subBreed ? capitalize(subBreed) : \"\"}`.trim();\r\n}\r\n\r\n/**\r\n * @param src\r\n * @returns {Promise<unknown>}\r\n * @desc Promisify an image src which\r\n * resolves when the image has loaded.\r\n */\r\nexport function promisifyImage(src) {\r\n    return new Promise(resolve => {\r\n        const img = new Image();\r\n        img.addEventListener(\"load\", resolve);\r\n        img.setAttribute(\"src\", src);\r\n    });\r\n}\r\n\r\n/**\r\n * @param photos\r\n * @desc Promisify a list of photos which\r\n * resolves when all of the photos have settled\r\n * (rejected or resolved).\r\n */\r\nexport function promisifyPhotos(photos) {\r\n    const promises = photos.map(promisifyImage);\r\n    return Promise.allSettled(promises);\r\n}\r\n\r\n/**\r\n * @param n {int} - the amount of random dogs to generate\r\n * @param dogs {string[]} - the original dog array\r\n * @param prev {string[]} - the previous array of dogs\r\n * @desc Generate n more unique random dogs that do not\r\n * exists in the previous array of dogs.\r\n */\r\nexport function randomDogs(n, dogs, prev=[]) {\r\n    const diff = difference(dogs, prev);\r\n    const result = [...prev];\r\n    while(n > 0) {\r\n        if (diff.length === 0) break;\r\n        const randIndex = random(0,diff.length-1);\r\n        const randValue = diff.splice(randIndex, 1);\r\n        if (randValue.length) {\r\n            result.push(randValue[0]);\r\n            n--;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * @param breed\r\n * @param subBreed\r\n * @desc Use this function to convert a\r\n * breed into a key. Ensures the same key is\r\n * used throughout the app.\r\n */\r\nexport function breedToKey({breed, subBreed}) {\r\n    return JSON.stringify({breed, subBreed});\r\n}\r\n\r\n/**\r\n * @param key {string}\r\n * @desc Use this function to convert a key\r\n * to a breed.\r\n */\r\nexport function keyToBreed(key) {\r\n    return JSON.parse(key);\r\n}\r\n\r\n/**\r\n * @param prevDogs\r\n * @param breed\r\n * @param subBreed\r\n * @param dogs\r\n * @desc Update a previous dog object with a new\r\n * dog object. A set is used to ensure uniqueness.\r\n */\r\nexport function updateDogs(prevDogs, {breed, subBreed, dogs}) {\r\n    const key = breedToKey({breed, subBreed});\r\n    const newDogs = cloneDeep(prevDogs);\r\n    if (!(key in newDogs)) {\r\n        newDogs[key] = new Set(dogs);\r\n    } else {\r\n        newDogs[key] = new Set([...newDogs[key], ...dogs]);\r\n    }\r\n    return newDogs;\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\nimport Photo from \"../../non-connected/photo/photo\";\r\nimport InfiniteScroll from \"../../non-connected/infinite-scroll/infinite-scroll\";\r\nimport {getRandomDogs, appendCurrentDogs} from \"../../../redux/actions/dogs\";\r\nimport {promisifyPhotos} from \"../../../util/util\";\r\nimport './photos.scss';\r\n\r\n/**\r\n * @param dogState\r\n * @param dispatch\r\n * @desc Photos is a connected component for displaying\r\n * the current dogs from the dog state as photos.\r\n *\r\n * Features:\r\n *  - maintains a loaded photos state so that each page is loaded simultaneously\r\n *  - renders dog photos with infinite scrolling\r\n */\r\nfunction Photos({dogState, dispatch}) {\r\n\r\n    // CONSTANTS -------------------------------------------------------------------------------------------------------\r\n\r\n    const {currentBreed, dogs, currentDogs, favoriteDogs, showingFavoriteDogs, pageSize} = dogState;\r\n    const max = (showingFavoriteDogs ? favoriteDogs.length : dogs[currentBreed].size);\r\n\r\n    // COMPONENT STATE -------------------------------------------------------------------------------------------------\r\n\r\n    const [loadedPhotos, setLoadedPhotos] = useState([]);\r\n\r\n    // SIDE EFFECTS ----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @desc Whenever current dogs changes,\r\n     * wait for all of the not yet loaded\r\n     * dog photos to load, then update the\r\n     * loaded photos state with all of the\r\n     * dogs simultaneously.\r\n     */\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n        const notLoadedPhotos = currentDogs.filter(dog => !loadedPhotos.includes(dog));\r\n        promisifyPhotos(notLoadedPhotos).then(() => {\r\n            if (isMounted) {\r\n                setLoadedPhotos([...loadedPhotos, ...notLoadedPhotos]);\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            isMounted = false;\r\n        }\r\n    }, [currentDogs]);\r\n\r\n    // HANDLERS --------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @desc A handler to call when the last\r\n     * row inside of an infinite scroll is\r\n     * in view.\r\n     */\r\n    const handleLastRow = () => {\r\n        const {length} = currentDogs;\r\n        if (length < max) {\r\n            if (showingFavoriteDogs) {\r\n                dispatch(appendCurrentDogs(favoriteDogs.slice(length, length + pageSize)));\r\n            } else {\r\n                dispatch(getRandomDogs());\r\n            }\r\n        }\r\n    };\r\n\r\n    // COMPONENTS ------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @desc Prepares a list of dog photos to be rendered\r\n     * inside of an infinite scrolling component.\r\n     */\r\n    const rows = currentDogs.map(url => {\r\n        const props = {\r\n            url,\r\n            key: url,\r\n            isFavorite: favoriteDogs.includes(url),\r\n            isLoaded: loadedPhotos.includes(url),\r\n            dispatch\r\n        };\r\n        return (<Photo {...props}/>);\r\n    });\r\n\r\n    return (\r\n        <InfiniteScroll className={\"photos\"} handleLastRow={handleLastRow}>\r\n            {rows}\r\n        </InfiniteScroll>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    dogState: state.dogs\r\n});\r\n\r\nPhotos.propTypes = {\r\n    dogState: PropTypes.object,\r\n    dispatch: PropTypes.func\r\n};\r\n\r\nexport default connect(mapStateToProps)(Photos);\r\n\r\n","import React, {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Icon, Switch } from \"@blueprintjs/core\";\r\nimport { IconNames } from \"@blueprintjs/icons\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport {showFavoriteDogs} from \"../../../redux/actions/dogs\";\r\nimport {setFirstSearch} from \"../../../redux/actions/app\";\r\nimport {connect} from \"react-redux\";\r\nimport {throttle} from \"lodash\";\r\nimport {setDarkTheme} from \"../../../redux/actions/app\";\r\nimport './menu.scss';\r\n\r\n/**\r\n * @param dispatch - used to dispatch actions to redux store\r\n * @param darkTheme - whether the current theme is dark\r\n * @desc The menu component opens and close a menu for the entire app.\r\n *\r\n * Features:\r\n *  - backdrop filter if vertical scroll position greater than zero\r\n *  - open & close dialog animation\r\n *  - slider for switching theme\r\n *  - button for showing favorite dogs\r\n */\r\nfunction Menu ({dispatch, darkTheme}) {\r\n\r\n    // COMPONENT STATE -------------------------------------------------------------------------------------------------\r\n\r\n    const [menuOpen, setMenuOpen] = useState(false);\r\n    const [scrollY, setScrollY] = useState(0);\r\n\r\n    // SIDE EFFECTS ----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @desc Registers an event listener on the window's\r\n     * vertical scroll position.\r\n     */\r\n    useEffect(() => {\r\n        const updateScroll = throttle(() => {\r\n            setScrollY(window.scrollY);\r\n        }, 100);\r\n        window.addEventListener(\"scroll\", updateScroll);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", updateScroll);\r\n        };\r\n    }, []);\r\n\r\n    // HANDLERS --------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @desc A click handler for clicking on the\r\n     * favorite button.\r\n     */\r\n    const handleOnClick = () => {\r\n        window.scroll({\r\n            top: 0,\r\n            left: 0,\r\n            behavior: 'smooth'\r\n        });\r\n        dispatch(setFirstSearch(false));\r\n        dispatch(showFavoriteDogs());\r\n        setMenuOpen(false);\r\n    };\r\n\r\n    // COMPONENTS ------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @desc A dialog background.\r\n     */\r\n    const renderBackground = () => {\r\n        if (menuOpen) {\r\n            return (\r\n                <div className={\"dialog-background\"} onClick={() => setMenuOpen(false)}/>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={`menu ${scrollY > 0 ? 'active' : \"\"}`}>\r\n                <span className={\"menu-icon\"} onClick={() => setMenuOpen(!menuOpen)}>\r\n                   <Icon icon={IconNames.MENU}/>\r\n                </span>\r\n            </div>\r\n            {renderBackground()}\r\n            <CSSTransition in={menuOpen} unmountOnExit mountOnEnter classNames=\"dialog\" timeout={250}>\r\n                <nav>\r\n                    <ul>\r\n                        <li onClick={handleOnClick}>\r\n                            <Icon icon={IconNames.STAR}/>\r\n                            <div>Favorites</div>\r\n                        </li>\r\n                        <li>\r\n                            <Icon icon={IconNames.MOON}/>\r\n                            <Switch checked={darkTheme} onChange={() => dispatch(setDarkTheme(!darkTheme))}/>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n            </CSSTransition>\r\n        </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    darkTheme: state.app.darkTheme\r\n});\r\n\r\nMenu.propTypes = {\r\n    dispatch: PropTypes.func,\r\n    darkTheme: PropTypes.bool\r\n};\r\n\r\nexport default connect(mapStateToProps)(Menu);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {setError} from \"../../../redux/actions/app\";\r\nimport { Icon, Intent} from \"@blueprintjs/core\";\r\nimport { IconNames } from \"@blueprintjs/icons\";\r\nimport './error-boundary.scss';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.props.dispatch(setError({error,errorInfo}));\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return (\r\n                <main className={\"error-boundary\"}>\r\n                    <div className={\"message\"}>\r\n                        <Icon icon={IconNames.ERROR} intent={Intent.DANGER}/>\r\n                        <h1>Sorry, something went wrong.</h1>\r\n                        <h2>Please try again later.</h2>\r\n                    </div>\r\n                </main>\r\n            );\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nErrorBoundary.propTypes = {\r\n    dispatch: PropTypes.func\r\n};\r\nexport default ErrorBoundary;","import React, {useState, useEffect, useRef} from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport {Icon} from \"@blueprintjs/core\";\r\nimport { IconNames } from \"@blueprintjs/icons\";\r\nimport {mod, prettifyBreed, breedToKey, keyToBreed} from \"../../../util/util\";\r\nimport './search.scss';\r\n\r\n/**\r\n * @param items {[]} - the items to make searchable and selectable\r\n * @param handleValueChange {function} - a handler to call on the selected item\r\n * @param firstSearch {boolean} - whether the first search is completed\r\n * @desc A search bar component for selecting a type of breed.\r\n *\r\n * Features:\r\n *  - displays an option dialog on input focus\r\n *  - allow dialog search on Arrow keys (up & down)\r\n *  - allow option selection on click and Enter key\r\n */\r\nfunction Search({items, handleValueChange, handleOnFocus, firstSearch}) {\r\n\r\n    // CONSTANTS -------------------------------------------------------------------------------------------------------\r\n\r\n    const INITIAL_PLACEHOLDER = \"Search dog breed\";\r\n    const KEY_CODE = Object.freeze({\r\n        UP: 38,\r\n        DOWN: 40,\r\n        ENTER: 13\r\n    });\r\n\r\n    // COMPONENT STATE -------------------------------------------------------------------------------------------------\r\n\r\n    const [inputVal, setInputVal] = useState('');\r\n    const [showOptions, setShowOptions] = useState(false);\r\n    const [filteredItems, setFilteredItems] = useState([]);\r\n    const [selectedIndex, setSelectedIndex] = useState(0);\r\n    const [placeholder, setPlaceholder] = useState(INITIAL_PLACEHOLDER);\r\n\r\n    // ELEMENT REFS ----------------------------------------------------------------------------------------------------\r\n\r\n    const searchContainerRef = useRef(null);\r\n    const currOptionRef = useRef(null);\r\n\r\n    // SIDE EFFECTS ----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @desc Whenever the current option changes,\r\n     * scroll it into view if needed.\r\n     */\r\n    useEffect(() => {\r\n       const {current} = currOptionRef;\r\n       if (current) current.scrollIntoViewIfNeeded(false);\r\n    }, [selectedIndex]);\r\n\r\n    /**\r\n     * @desc Registers an event listener for detecting\r\n     * clicks outside of the search container. Close the\r\n     * option dialog on outside click.\r\n     */\r\n    useEffect(() => {\r\n        const handleClick = e => {\r\n            if (!searchContainerRef.current.contains(e.target)) {\r\n                setShowOptions(false);\r\n            }\r\n        };\r\n        document.addEventListener(\"mousedown\", handleClick);\r\n\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClick);\r\n        };\r\n    }, []);\r\n\r\n    /**\r\n     * @desc Whenever items changes, make sure to update the\r\n     * filtered list of items.\r\n     */\r\n    useEffect(() => {setFilteredItems(items)}, [items]);\r\n\r\n    /**\r\n     * @desc Whenever the input value changes, update the\r\n     * filtered list of items.\r\n     */\r\n    useEffect(() => {\r\n        const cache = {};\r\n        if (!(inputVal in cache)) {\r\n            cache[inputVal] = items.filter(({breed, subBreed}) => // prefix match\r\n                `${breed} ${subBreed}`.slice(0,inputVal.length).toLowerCase() === inputVal.toLowerCase()\r\n            );\r\n        }\r\n        setFilteredItems(cache[inputVal]);\r\n    }, [inputVal]);\r\n\r\n    /**\r\n     * @desc If the component state is currently NOT showing the\r\n     * option dialog, then reset the placeholder.\r\n     */\r\n    useEffect(() => {\r\n        if (!showOptions) setPlaceholder(INITIAL_PLACEHOLDER);\r\n    }, [showOptions]);\r\n\r\n    // HANDLERS --------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @param e\r\n     * @desc A change handler for updating\r\n     * the appropriate states on input change.\r\n     */\r\n    const handleOnChange = e => {\r\n        try {\r\n            setInputVal(e.target.value);\r\n            setShowOptions(true);\r\n            if (!e.target.value && filteredItems.length) setPlaceholder(prettifyBreed(filteredItems[0]));\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param key - the string representation of a breed as a key\r\n     * @desc A handler for selecting an option. Updates the input,\r\n     * closes the option dialog, and calls the parent handler.\r\n     */\r\n    const optionSelect = key => {\r\n        try {\r\n            const breed = keyToBreed(key);\r\n            setInputVal(prettifyBreed(breed));\r\n            setShowOptions(false);\r\n            handleValueChange(breed);\r\n            setSelectedIndex(0); // reset\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param e\r\n     * @desc A keyup handler. Deals with updating\r\n     * the input placeholder and selecting an option.\r\n     */\r\n    const handleOnKeyUp = e => {\r\n        try {\r\n            const {length} = filteredItems;\r\n            let newIndex;\r\n            switch(e.keyCode) {\r\n                case KEY_CODE.DOWN:\r\n                    newIndex = mod(selectedIndex + 1, length);\r\n                    setSelectedIndex(newIndex);\r\n                    setPlaceholder(prettifyBreed(filteredItems[newIndex]));\r\n                    break;\r\n                case KEY_CODE.UP:\r\n                    newIndex = mod(selectedIndex - 1, length);\r\n                    setSelectedIndex(newIndex);\r\n                    setPlaceholder(prettifyBreed(filteredItems[newIndex]));\r\n                    break;\r\n                case KEY_CODE.ENTER:\r\n                    optionSelect(breedToKey(filteredItems[selectedIndex]));\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    // COMPONENTS ------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @desc Renders an options dialog.\r\n     */\r\n    const renderOptions = () => {\r\n        if (showOptions && filteredItems.length) {\r\n            const options = filteredItems.map((breed,i) => {\r\n                const val = breedToKey(breed);\r\n                const label = prettifyBreed(breed);\r\n                const props = {\r\n                    className: \"option\",\r\n                    key: val,\r\n                    'data-value': val\r\n                };\r\n                if (i === selectedIndex) { // special style and ref for current selected option\r\n                    props.className += \" selected\";\r\n                    props.ref = currOptionRef;\r\n                }\r\n                return (<div {...props} onClick={e => optionSelect(e.target.dataset.value)}>{label}</div>);\r\n            });\r\n            return (\r\n                <div className={\"options-container\"}>\r\n                    <div className=\"options\">\r\n                        {options}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={\"search-container\"}\r\n            style={{'width': (firstSearch ? '50%' : \"80%\")}}\r\n            ref={searchContainerRef}>\r\n            <Icon icon={IconNames.SEARCH}/>\r\n            <input\r\n                type=\"text\"\r\n                className={(showOptions ? \"focus\" : \"\") + (showOptions && filteredItems.length ? \" dropdown\" : \"\")}\r\n                value={inputVal}\r\n                spellCheck={false}\r\n                onKeyUp={handleOnKeyUp}\r\n                onChange={handleOnChange}\r\n                placeholder={placeholder}\r\n                onFocus={handleOnFocus}/>\r\n            {renderOptions()}\r\n        </div>\r\n    );\r\n}\r\n\r\nSearch.propTypes = {\r\n    items: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\r\n    handleValueChange: PropTypes.func,\r\n    firstSearch: PropTypes.bool\r\n};\r\n\r\nexport default Search;\r\n","import {fetchBreeds} from \"../../api\";\r\nimport {FETCH_BREEDS} from \"./actionTypes\";\r\n\r\nfunction initialAction() {\r\n    return {\r\n        type: FETCH_BREEDS.INITIAL\r\n    }\r\n}\r\n\r\nfunction successAction(res) {\r\n    return {\r\n        type: FETCH_BREEDS.SUCCESS,\r\n        breeds: res.message\r\n    }\r\n}\r\n\r\nfunction failureAction(err) {\r\n    return {\r\n        type: FETCH_BREEDS.FAILURE,\r\n        err\r\n    }\r\n}\r\n\r\nexport default () => {\r\n    return async (dispatch) => {\r\n        dispatch(initialAction());\r\n        try {\r\n            const res = await fetchBreeds();\r\n            if (res.status === \"success\") {\r\n                dispatch(successAction(res));\r\n            } else {\r\n                dispatch(failureAction(res));\r\n            }\r\n        } catch (e) {\r\n            dispatch(failureAction(e))\r\n        }\r\n    };\r\n}","import React, {useEffect, useState, useMemo} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport Photos from \"../photos/photos\";\nimport Menu from \"../menu/menu\";\nimport ErrorBoundary from \"../../non-connected/error-boundary/error-boundary\";\nimport Search from '../../non-connected/search/search';\nimport {getDogs, setCurrentBreed, getRandomDogs} from '../../../redux/actions/dogs';\nimport fetchBreeds from '../../../redux/actions/breeds';\nimport {setFirstSearch, setShowToast} from \"../../../redux/actions/app\";\nimport {breedToKey} from \"../../../util/util\";\nimport {Icon, Toast, Toaster, Position} from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport './App.scss';\n\n/**\n * @param appState\n * @param dogState\n * @param breeds\n * @param dispatch - provided by connect, used to dispatch actions\n * @desc App is a top level connected component.\n *\n * Main Responsibilities:\n *  - fetching breeds data from Dogs API\n *  - updating theme\n *  - displaying a memoized photos component\n *  - displaying toasts\n */\nfunction App({appState, dogState, breeds, dispatch}) {\n\n    // CONSTANTS -------------------------------------------------------------------------------------------------------\n\n    const {firstSearch, showToast, darkTheme} = appState;\n    const {dogs, currentBreed, showingFavoriteDogs, currentDogs} = dogState;\n\n    // SIDE EFFECTS ----------------------------------------------------------------------------------------------------\n\n    /**\n     * @desc Fetch all of the possible breeds\n     * and subBreeds only once.\n     */\n    useEffect(() => {\n        dispatch(fetchBreeds());\n    }, []);\n\n    /**\n     * @desc Whenever the theme changes,\n     * update the html class accordingly.\n     */\n    useEffect(() => {\n        if (darkTheme) {\n            document.querySelector(\"html\").className = \"dark\";\n            return;\n        }\n        document.querySelector(\"html\").className = \"light\";\n    }, [darkTheme]);\n\n    // HANDLERS --------------------------------------------------------------------------------------------------------\n\n    /**\n     * @param breed\n     * @param subBreed\n     * @desc A handler for dispatching actions to the\n     * app and dog state according to the value selected\n     * from the search component.\n     */\n    const handleValueChange = async ({breed,subBreed}) => {\n        try {\n            const key = breedToKey({breed,subBreed});\n            if (!(key in dogs)) {\n                await dispatch(getDogs(breed, subBreed));\n            }\n            await dispatch(setCurrentBreed(key));\n            dispatch(getRandomDogs());\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    /**\n     * @desc A focus handler for setting\n     * first search to false.\n     */\n    const handleOnFocus = () => {\n        dispatch(setFirstSearch(false));\n    };\n\n    // COMPONENTS ------------------------------------------------------------------------------------------------------\n\n    /**\n     * @desc Memoize the return value to control\n     * when the photos component re-renders.\n     */\n    const dogPhotos = useMemo(() => {\n        if (currentBreed && dogs[currentBreed] && dogs[currentBreed].size) {\n            return (<Photos/>);\n        }\n        return null;\n    }, [dogs, currentBreed]);\n\n    /**\n     * @desc A small component to show when\n     * the user has selected \"favorites\" and\n     * there are currently no favorite dogs\n     * in the app state.\n     */\n    const noFavorites = (\n      <div className={\"no-favorites\"}>\n          <div>Click on the \"</div>\n          <Icon icon={IconNames.STAR_EMPTY}/>\n          <div>\" icon to favorite a photo.</div>\n      </div>\n    );\n\n    /**\n     * @desc A toast is rendered every time the\n     * user clicks on a photo to indicate that\n     * the photo's URL has been copied to the\n     * clipboard.\n     */\n    const renderToast = () => {\n        if (showToast) {\n            return (\n                <Toast\n                    icon={IconNames.CLIPBOARD}\n                    message={\"Copied to clipboard\"}\n                    onDismiss={() => dispatch(setShowToast(false))}\n                    timeout={2000}/>\n            );\n        }\n        return null;\n    };\n\n    const searchProps = {\n        items: breeds,\n        handleValueChange,\n        handleOnFocus,\n        firstSearch\n    };\n\n    return (\n        <ErrorBoundary dispatch={dispatch}>\n            <main>\n                <div className={`query-container ${firstSearch ? \"first-search\" : \"\"}`}>\n                    <Search {...searchProps}/>\n                </div>\n                {(showingFavoriteDogs && !currentDogs.length) ? noFavorites : dogPhotos}\n            </main>\n            <Menu/>\n            <Toaster position={Position.TOP}>\n                {renderToast()}\n            </Toaster>\n        </ErrorBoundary>\n    );\n}\n\nApp.propTypes = {\n    appState: PropTypes.object,\n    dogState: PropTypes.object,\n    breeds: PropTypes.array,\n    dispatch: PropTypes.func\n};\n\nconst mapStateToProps = (state) => ({\n    dogState: state.dogs,\n    breeds: state.breeds.breeds,\n    appState: state.app\n});\n\nexport default connect(mapStateToProps)(App);\n","import {FETCH_DOGS, DOGS} from \"../actions/actionTypes\";\r\nimport {updateDogs, randomDogs} from \"../../util/util\";\r\n\r\nconst INITIAL_STATE = {\r\n    inProgress: false,\r\n    dogs: {},\r\n    pageSize: 9,\r\n    currentBreed: null,\r\n    currentDogs: [],\r\n    favoriteDogs: [],\r\n    showingFavoriteDogs: false,\r\n    err: null\r\n};\r\n\r\nexport default (prevState = INITIAL_STATE, action) => {\r\n    let {dogs, pageSize, currentBreed, currentDogs, favoriteDogs} = prevState;\r\n    switch(action.type) {\r\n        case FETCH_DOGS.INITIAL:\r\n            return {\r\n                ...prevState,\r\n                inProgress: true,\r\n                err: null\r\n            };\r\n        case FETCH_DOGS.SUCCESS:\r\n            dogs = updateDogs(prevState.dogs, action);\r\n            return {\r\n                ...prevState,\r\n                inProgress: false,\r\n                dogs,\r\n                err: null\r\n            };\r\n        case FETCH_DOGS.FAILURE:\r\n            return {\r\n                ...prevState,\r\n                inProgress: false,\r\n                err: action.err\r\n            };\r\n        case DOGS.SET_CURRENT_BREED:\r\n            return  {\r\n                ...prevState,\r\n                currentBreed: action.currentBreed,\r\n                showingFavoriteDogs: false, // reset\r\n                currentDogs: [] // reset\r\n            };\r\n        case DOGS.GET_RANDOM_DOGS:\r\n            currentDogs = randomDogs(pageSize, Array.from(dogs[currentBreed]), currentDogs);\r\n            return {\r\n                ...prevState,\r\n                currentDogs\r\n            };\r\n        case DOGS.APPEND_CURRENT_DOGS:\r\n            return {\r\n                ...prevState,\r\n                currentDogs: [...currentDogs, ...action.currentDogs]\r\n            };\r\n        case DOGS.ADD_FAVORITE:\r\n            return {\r\n                ...prevState,\r\n                favoriteDogs: [...favoriteDogs, action.dog]\r\n            };\r\n        case DOGS.REMOVE_FAVORITE:\r\n            const newFavoriteDogs = [...favoriteDogs];\r\n            const index = newFavoriteDogs.findIndex(val => val === action.dog);\r\n            if (index > -1) {\r\n                newFavoriteDogs.splice(index,1);\r\n            }\r\n            return {\r\n                ...prevState,\r\n                favoriteDogs: newFavoriteDogs\r\n            };\r\n        case DOGS.SHOW_FAVORITES:\r\n            return {\r\n                ...prevState,\r\n                showingFavoriteDogs: true,\r\n                currentDogs: favoriteDogs.slice(0,pageSize)\r\n            };\r\n        default:\r\n            return prevState;\r\n    }\r\n}","import {FETCH_BREEDS} from \"../actions/actionTypes\";\r\n\r\nconst INITIAL_STATE = {\r\n    inProgress: false,\r\n    breeds: [],\r\n    err: null\r\n};\r\n\r\n/**\r\n * @param breeds\r\n * @returns {[]}\r\n * @desc Formats the object from the Dogs Breeds endpoint\r\n * to an array of breeds and sub-breeds.\r\n * Object to format: https://dog.ceo/api/breeds/list/all\r\n */\r\nfunction formatBreeds(breeds) {\r\n    const result = [];\r\n    Object.entries(breeds).forEach(([breed,subBreeds]) => {\r\n        if (subBreeds.length) {\r\n            subBreeds.forEach(subBreed => result.push({breed, subBreed}));\r\n        } else {\r\n            result.push({breed, subBreed: null});\r\n        }\r\n    });\r\n    return result;\r\n}\r\n\r\nexport default (prevState = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case FETCH_BREEDS.INITIAL:\r\n            return {\r\n                ...prevState,\r\n                inProgress: true,\r\n                breeds: [],\r\n                err: null\r\n            };\r\n        case FETCH_BREEDS.SUCCESS:\r\n            const breeds = formatBreeds(action.breeds);\r\n            return {\r\n                ...prevState,\r\n                inProgress: false,\r\n                breeds,\r\n                err: null\r\n            };\r\n        case FETCH_BREEDS.FAILURE:\r\n            return {\r\n                ...prevState,\r\n                inProgress: false,\r\n                breeds: [],\r\n                err: action.err\r\n            };\r\n        default:\r\n            return prevState;\r\n    }\r\n}","import {APP} from \"../actions/actionTypes\";\r\n\r\nconst INITIAL_STATE = {\r\n    firstSearch: true,\r\n    darkTheme: true,\r\n    showToast: false,\r\n    error: null\r\n};\r\n\r\nexport default (prevState = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case APP.SET_FIRST_SEARCH:\r\n            return {\r\n                ...prevState,\r\n                firstSearch: action.firstSearch\r\n            };\r\n        case APP.SET_DARK_THEME:\r\n            return {\r\n                ...prevState,\r\n                darkTheme: action.darkTheme\r\n            };\r\n        case APP.SHOW_TOAST:\r\n            return {\r\n                ...prevState,\r\n                showToast: action.showToast\r\n            };\r\n        case APP.SET_ERROR:\r\n            return {\r\n                ...prevState,\r\n                error: action.error\r\n            };\r\n        default:\r\n            return prevState;\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport dogs from \"./dogs\";\r\nimport breeds from \"./breeds\";\r\nimport app from \"./app\";\r\n\r\nexport default combineReducers({dogs, breeds, app});","import {createStore, applyMiddleware} from 'redux';\r\nimport logger from 'redux-logger';\r\nimport finalReducer from './reducers/index';\r\nimport thunk from \"redux-thunk\";\r\n\r\n// todo: remove logger in production env\r\nconst middleware = applyMiddleware(logger, thunk);\r\n\r\nexport default createStore(finalReducer, middleware);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider} from 'react-redux';\nimport App from './components/connected/app/App';\nimport store from './redux/store';\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n"],"sourceRoot":""}